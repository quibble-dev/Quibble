/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/q/quiblets/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['q_quiblets_list'];
    put?: never;
    post: operations['q_quiblets_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/q/quiblets/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['q_quiblets_retrieve'];
    put: operations['q_quiblets_update'];
    post?: never;
    delete: operations['q_quiblets_destroy'];
    options?: never;
    head?: never;
    patch: operations['q_quiblets_partial_update'];
    trace?: never;
  };
  '/api/v1/q/quibs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['q_quibs_list'];
    put?: never;
    post: operations['q_quibs_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/q/quibs/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['q_quibs_retrieve'];
    put: operations['q_quibs_update'];
    post?: never;
    delete: operations['q_quibs_destroy'];
    options?: never;
    head?: never;
    patch: operations['q_quibs_partial_update'];
    trace?: never;
  };
  '/api/v1/u/auth/login/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Customized drf basic token authentication.
     *
     *     This view authenticates the user using email and password credentials
     *     and issues a token upon successful login. */
    post: operations['u_auth_login_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/auth/logout/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description View to handle user logout by deleting the authentication token. */
    post: operations['u_auth_logout_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/auth/register/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description View to handle registering of new users. */
    post: operations['u_auth_register_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/me/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description View to retrieve information for the currently authenticated user.
     *
     *     - `get`: Returns the details of the authenticated user based on their token.
     *
     *     Permission:
     *     - Requires user authentication. */
    get: operations['u_me_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/me/profiles/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    get: operations['u_me_profiles_list'];
    put?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    post: operations['u_me_profiles_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/me/profiles/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    get: operations['u_me_profiles_retrieve'];
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    put: operations['u_me_profiles_update'];
    post?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    delete: operations['u_me_profiles_destroy'];
    options?: never;
    head?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    patch: operations['u_me_profiles_partial_update'];
    trace?: never;
  };
  '/api/v1/u/profiles/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet for performing read-only operations on the Profile model.
     *
     *     Filtering:
     *     - Allows searching profiles by username. */
    get: operations['u_profiles_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/u/profiles/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet for performing read-only operations on the Profile model.
     *
     *     Filtering:
     *     - Allows searching profiles by username. */
    get: operations['u_profiles_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Auth: {
      /**
       * Email Address
       * Format: email
       */
      email: string;
      password: string;
    };
    AuthTokenResponse: {
      token: string;
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: 'client_error';
    /**
     * @description * `primary` - primary
     *     * `secondary` - secondary
     *     * `accent` - accent
     *     * `neutral` - neutral
     *     * `info` - info
     *     * `success` - success
     *     * `warning` - warning
     *     * `error` - error
     * @enum {string}
     */
    ColorEnum:
      | 'primary'
      | 'secondary'
      | 'accent'
      | 'neutral'
      | 'info'
      | 'success'
      | 'warning'
      | 'error';
    /** @description Serializer for views returning just a response with detail key */
    DetailResponse: {
      detail: string;
    };
    Error404: {
      code: components['schemas']['ErrorCode404Enum'];
      detail: string;
      attr: string | null;
    };
    Error500: {
      code: components['schemas']['ErrorCode500Enum'];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: 'not_found';
    /**
     * @description * `error` - Error
     * @enum {string}
     */
    ErrorCode500Enum: 'error';
    ErrorResponse404: {
      type: components['schemas']['ClientErrorEnum'];
      errors: components['schemas']['Error404'][];
    };
    ErrorResponse500: {
      type: components['schemas']['ServerErrorEnum'];
      errors: components['schemas']['Error500'][];
    };
    PatchedProfile: {
      readonly id?: number;
      readonly user?: components['schemas']['User'];
      /** Format: date-time */
      readonly created_at?: string;
      color?: components['schemas']['ColorEnum'];
      /** Format: uri */
      avatar?: string | null;
      /** @description Required. 25 characters or fewer. Letters, digits and ./_ only. */
      username?: string;
      first_name?: string | null;
      last_name?: string | null;
      bio?: string | null;
    };
    PatchedQuib: {
      readonly id?: string;
      readonly quiblet?: components['schemas']['Quiblet'];
      /** Format: date-time */
      readonly created_at?: string;
      is_public?: boolean;
      title?: string;
      readonly slug?: string;
      content?: string;
      /** Format: uri */
      cover?: string | null;
      /** Quibbler */
      quibber?: number;
      likes?: number[];
      dislikes?: number[];
    };
    PatchedQuiblet: {
      readonly id?: number;
      /** Format: date-time */
      readonly created_at?: string;
      /** Format: uri */
      avatar?: string | null;
      is_public?: boolean;
      name?: string;
      description?: string;
      /** Format: uri */
      cover?: string | null;
      members?: number[];
      rangers?: number[];
    };
    Profile: {
      readonly id: number;
      readonly user: components['schemas']['User'];
      /** Format: date-time */
      readonly created_at: string;
      color?: components['schemas']['ColorEnum'];
      /** Format: uri */
      avatar?: string | null;
      /** @description Required. 25 characters or fewer. Letters, digits and ./_ only. */
      username: string;
      first_name?: string | null;
      last_name?: string | null;
      bio?: string | null;
    };
    QQuibletsCreateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsCreateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsCreateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibletsCreateError:
      | components['schemas']['QQuibletsCreateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibletsCreateAvatarErrorComponent']
      | components['schemas']['QQuibletsCreateIsPublicErrorComponent']
      | components['schemas']['QQuibletsCreateNameErrorComponent']
      | components['schemas']['QQuibletsCreateDescriptionErrorComponent']
      | components['schemas']['QQuibletsCreateCoverErrorComponent']
      | components['schemas']['QQuibletsCreateMembersErrorComponent']
      | components['schemas']['QQuibletsCreateRangersErrorComponent'];
    QQuibletsCreateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsCreateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsCreateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    QQuibletsCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsCreateRangersErrorComponent: {
      /**
       * @description * `rangers` - rangers (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'rangers';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibletsCreateError'][];
    };
    QQuibletsPartialUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsPartialUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsPartialUpdateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibletsPartialUpdateError:
      | components['schemas']['QQuibletsPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateAvatarErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateIsPublicErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateNameErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateDescriptionErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateCoverErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateMembersErrorComponent']
      | components['schemas']['QQuibletsPartialUpdateRangersErrorComponent'];
    QQuibletsPartialUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsPartialUpdateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsPartialUpdateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    QQuibletsPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsPartialUpdateRangersErrorComponent: {
      /**
       * @description * `rangers` - rangers (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'rangers';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibletsPartialUpdateError'][];
    };
    QQuibletsUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibletsUpdateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibletsUpdateError:
      | components['schemas']['QQuibletsUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibletsUpdateAvatarErrorComponent']
      | components['schemas']['QQuibletsUpdateIsPublicErrorComponent']
      | components['schemas']['QQuibletsUpdateNameErrorComponent']
      | components['schemas']['QQuibletsUpdateDescriptionErrorComponent']
      | components['schemas']['QQuibletsUpdateCoverErrorComponent']
      | components['schemas']['QQuibletsUpdateMembersErrorComponent']
      | components['schemas']['QQuibletsUpdateRangersErrorComponent'];
    QQuibletsUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsUpdateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsUpdateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    QQuibletsUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibletsUpdateRangersErrorComponent: {
      /**
       * @description * `rangers` - rangers (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'rangers';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibletsUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibletsUpdateError'][];
    };
    QQuibsCreateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsCreateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibsCreateDislikesErrorComponent: {
      /**
       * @description * `dislikes` - dislikes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'dislikes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsCreateError:
      | components['schemas']['QQuibsCreateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibsCreateIsPublicErrorComponent']
      | components['schemas']['QQuibsCreateTitleErrorComponent']
      | components['schemas']['QQuibsCreateContentErrorComponent']
      | components['schemas']['QQuibsCreateCoverErrorComponent']
      | components['schemas']['QQuibsCreateQuibberErrorComponent']
      | components['schemas']['QQuibsCreateLikesErrorComponent']
      | components['schemas']['QQuibsCreateDislikesErrorComponent'];
    QQuibsCreateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsCreateLikesErrorComponent: {
      /**
       * @description * `likes` - likes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'likes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsCreateQuibberErrorComponent: {
      /**
       * @description * `quibber` - quibber (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'quibber';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
      detail: string;
    };
    QQuibsCreateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibsCreateError'][];
    };
    QQuibsPartialUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsPartialUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibsPartialUpdateDislikesErrorComponent: {
      /**
       * @description * `dislikes` - dislikes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'dislikes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsPartialUpdateError:
      | components['schemas']['QQuibsPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibsPartialUpdateIsPublicErrorComponent']
      | components['schemas']['QQuibsPartialUpdateTitleErrorComponent']
      | components['schemas']['QQuibsPartialUpdateContentErrorComponent']
      | components['schemas']['QQuibsPartialUpdateCoverErrorComponent']
      | components['schemas']['QQuibsPartialUpdateQuibberErrorComponent']
      | components['schemas']['QQuibsPartialUpdateLikesErrorComponent']
      | components['schemas']['QQuibsPartialUpdateDislikesErrorComponent'];
    QQuibsPartialUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsPartialUpdateLikesErrorComponent: {
      /**
       * @description * `likes` - likes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'likes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsPartialUpdateQuibberErrorComponent: {
      /**
       * @description * `quibber` - quibber (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'quibber';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
      detail: string;
    };
    QQuibsPartialUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibsPartialUpdateError'][];
    };
    QQuibsUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    QQuibsUpdateDislikesErrorComponent: {
      /**
       * @description * `dislikes` - dislikes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'dislikes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsUpdateError:
      | components['schemas']['QQuibsUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['QQuibsUpdateIsPublicErrorComponent']
      | components['schemas']['QQuibsUpdateTitleErrorComponent']
      | components['schemas']['QQuibsUpdateContentErrorComponent']
      | components['schemas']['QQuibsUpdateCoverErrorComponent']
      | components['schemas']['QQuibsUpdateQuibberErrorComponent']
      | components['schemas']['QQuibsUpdateLikesErrorComponent']
      | components['schemas']['QQuibsUpdateDislikesErrorComponent'];
    QQuibsUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsUpdateLikesErrorComponent: {
      /**
       * @description * `likes` - likes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'likes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    QQuibsUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    QQuibsUpdateQuibberErrorComponent: {
      /**
       * @description * `quibber` - quibber (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'quibber';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
      detail: string;
    };
    QQuibsUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    QQuibsUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['QQuibsUpdateError'][];
    };
    Quib: {
      readonly id: string;
      readonly quiblet: components['schemas']['Quiblet'];
      /** Format: date-time */
      readonly created_at: string;
      is_public?: boolean;
      title: string;
      readonly slug: string;
      content: string;
      /** Format: uri */
      cover?: string | null;
      /** Quibbler */
      quibber: number;
      likes?: number[];
      dislikes?: number[];
    };
    QuibSlim: {
      readonly id: string;
      readonly quiblet: components['schemas']['QuibletSlim'];
      /** Format: date-time */
      readonly created_at: string;
      is_public?: boolean;
      title: string;
      readonly slug: string;
      content: string;
      /** Format: uri */
      cover?: string | null;
      likes?: number[];
      dislikes?: number[];
    };
    Quiblet: {
      readonly id: number;
      /** Format: date-time */
      readonly created_at: string;
      /** Format: uri */
      avatar?: string | null;
      is_public?: boolean;
      name: string;
      description: string;
      /** Format: uri */
      cover?: string | null;
      members?: number[];
      rangers?: number[];
    };
    QuibletSlim: {
      name: string;
      /** Format: uri */
      avatar?: string | null;
    };
    /**
     * @description * `server_error` - Server Error
     * @enum {string}
     */
    ServerErrorEnum: 'server_error';
    UAuthLoginCreateEmailErrorComponent: {
      /**
       * @description * `email` - email (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'email';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UAuthLoginCreateError:
      | components['schemas']['UAuthLoginCreateNonFieldErrorsErrorComponent']
      | components['schemas']['UAuthLoginCreateEmailErrorComponent']
      | components['schemas']['UAuthLoginCreatePasswordErrorComponent'];
    UAuthLoginCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UAuthLoginCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'password';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UAuthLoginCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UAuthLoginCreateError'][];
    };
    UAuthRegisterCreateEmailErrorComponent: {
      /**
       * @description * `email` - email (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'email';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UAuthRegisterCreateError:
      | components['schemas']['UAuthRegisterCreateNonFieldErrorsErrorComponent']
      | components['schemas']['UAuthRegisterCreateEmailErrorComponent']
      | components['schemas']['UAuthRegisterCreatePasswordErrorComponent'];
    UAuthRegisterCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UAuthRegisterCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'password';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UAuthRegisterCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UAuthRegisterCreateError'][];
    };
    UMeProfilesCreateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesCreateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateColorErrorComponent: {
      /**
       * @description * `color` - color (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'color';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    UMeProfilesCreateError:
      | components['schemas']['UMeProfilesCreateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesCreateColorErrorComponent']
      | components['schemas']['UMeProfilesCreateAvatarErrorComponent']
      | components['schemas']['UMeProfilesCreateUsernameErrorComponent']
      | components['schemas']['UMeProfilesCreateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesCreateLastNameErrorComponent']
      | components['schemas']['UMeProfilesCreateBioErrorComponent'];
    UMeProfilesCreateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesCreateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesCreateError'][];
    };
    UMeProfilesPartialUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesPartialUpdateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateColorErrorComponent: {
      /**
       * @description * `color` - color (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'color';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    UMeProfilesPartialUpdateError:
      | components['schemas']['UMeProfilesPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateColorErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateAvatarErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateUsernameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateLastNameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateBioErrorComponent'];
    UMeProfilesPartialUpdateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesPartialUpdateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesPartialUpdateError'][];
    };
    UMeProfilesUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesUpdateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateColorErrorComponent: {
      /**
       * @description * `color` - color (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'color';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    UMeProfilesUpdateError:
      | components['schemas']['UMeProfilesUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesUpdateColorErrorComponent']
      | components['schemas']['UMeProfilesUpdateAvatarErrorComponent']
      | components['schemas']['UMeProfilesUpdateUsernameErrorComponent']
      | components['schemas']['UMeProfilesUpdateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesUpdateLastNameErrorComponent']
      | components['schemas']['UMeProfilesUpdateBioErrorComponent'];
    UMeProfilesUpdateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesUpdateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesUpdateError'][];
    };
    User: {
      readonly id: number;
      /**
       * Email Address
       * Format: email
       */
      email: string;
      password: string;
      /** Format: date-time */
      readonly date_joined: string;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: 'validation_error';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  q_quiblets_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quiblet'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quiblets_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quiblet'];
        'application/x-www-form-urlencoded': components['schemas']['Quiblet'];
        'multipart/form-data': components['schemas']['Quiblet'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quiblet'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibletsCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quiblets_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Quiblet. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quiblet'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quiblets_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Quiblet. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quiblet'];
        'application/x-www-form-urlencoded': components['schemas']['Quiblet'];
        'multipart/form-data': components['schemas']['Quiblet'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quiblet'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibletsUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quiblets_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Quiblet. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quiblets_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Quiblet. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedQuiblet'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedQuiblet'];
        'multipart/form-data': components['schemas']['PatchedQuiblet'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quiblet'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibletsPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QuibSlim'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quib'];
        'application/x-www-form-urlencoded': components['schemas']['Quib'];
        'multipart/form-data': components['schemas']['Quib'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quib'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibsCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Quib. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quib'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Quib. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quib'];
        'application/x-www-form-urlencoded': components['schemas']['Quib'];
        'multipart/form-data': components['schemas']['Quib'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quib'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibsUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Quib. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  q_quibs_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Quib. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedQuib'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedQuib'];
        'multipart/form-data': components['schemas']['PatchedQuib'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Quib'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['QQuibsPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_auth_login_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Auth'];
        'application/x-www-form-urlencoded': components['schemas']['Auth'];
        'multipart/form-data': components['schemas']['Auth'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthTokenResponse'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UAuthLoginCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_auth_logout_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DetailResponse'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_auth_register_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Auth'];
        'application/x-www-form-urlencoded': components['schemas']['Auth'];
        'multipart/form-data': components['schemas']['Auth'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Auth'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UAuthRegisterCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Profile'];
        'application/x-www-form-urlencoded': components['schemas']['Profile'];
        'multipart/form-data': components['schemas']['Profile'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Profile'];
        'application/x-www-form-urlencoded': components['schemas']['Profile'];
        'multipart/form-data': components['schemas']['Profile'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedProfile'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedProfile'];
        'multipart/form-data': components['schemas']['PatchedProfile'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
}
