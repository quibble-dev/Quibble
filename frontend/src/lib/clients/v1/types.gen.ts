// This file is auto-generated by @hey-api/openapi-ts

export type Auth = {
  email: string;
  password: string;
};

export type AuthLoginCreateEmailErrorComponent = {
  /**
   * * `email` - email
   */
  attr: 'email';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type AuthLoginCreateError =
  | ({
      attr?: 'non_field_errors';
    } & AuthLoginCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'email';
    } & AuthLoginCreateEmailErrorComponent)
  | ({
      attr?: 'password';
    } & AuthLoginCreatePasswordErrorComponent);

export type AuthLoginCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type AuthLoginCreatePasswordErrorComponent = {
  /**
   * * `password` - password
   */
  attr: 'password';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type AuthLoginCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<AuthLoginCreateError>;
};

export type AuthRegisterCreateEmailErrorComponent = {
  /**
   * * `email` - email
   */
  attr: 'email';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type AuthRegisterCreateError =
  | ({
      attr?: 'non_field_errors';
    } & AuthRegisterCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'email';
    } & AuthRegisterCreateEmailErrorComponent)
  | ({
      attr?: 'password';
    } & AuthRegisterCreatePasswordErrorComponent);

export type AuthRegisterCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type AuthRegisterCreatePasswordErrorComponent = {
  /**
   * * `password` - password
   */
  attr: 'password';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type AuthRegisterCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<AuthRegisterCreateError>;
};

export type AuthToken = {
  token: string;
};

/**
 * * `client_error` - Client Error
 */
export type ClientErrorEnum = 'client_error';

export type CommentCreate = {
  path?: string;
  content: string;
};

export type CommentDetail = {
  readonly id: number;
  quibbler: ProfileBasic | null;
  ratio: number;
  path: string;
  readonly created_at: string;
  content: string;
  deleted?: boolean;
  commenter?: number | null;
  upvotes?: Array<number>;
  downvotes?: Array<number>;
};

export type CommentsPartialUpdateCommenterErrorComponent = {
  /**
   * * `commenter` - commenter
   */
  attr: 'commenter';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   */
  code: 'does_not_exist' | 'incorrect_type';
  detail: string;
};

export type CommentsPartialUpdateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommentsPartialUpdateDeletedErrorComponent = {
  /**
   * * `deleted` - deleted
   */
  attr: 'deleted';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommentsPartialUpdateDownvotesErrorComponent = {
  /**
   * * `downvotes` - downvotes
   */
  attr: 'downvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommentsPartialUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & CommentsPartialUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'quibbler.non_field_errors';
    } & CommentsPartialUpdateQuibblerNonFieldErrorsErrorComponent)
  | ({
      attr?: 'quibbler.username';
    } & CommentsPartialUpdateQuibblerUsernameErrorComponent)
  | ({
      attr?: 'quibbler.avatar';
    } & CommentsPartialUpdateQuibblerAvatarErrorComponent)
  | ({
      attr?: 'ratio';
    } & CommentsPartialUpdateRatioErrorComponent)
  | ({
      attr?: 'path';
    } & CommentsPartialUpdatePathErrorComponent)
  | ({
      attr?: 'content';
    } & CommentsPartialUpdateContentErrorComponent)
  | ({
      attr?: 'deleted';
    } & CommentsPartialUpdateDeletedErrorComponent)
  | ({
      attr?: 'commenter';
    } & CommentsPartialUpdateCommenterErrorComponent)
  | ({
      attr?: 'upvotes';
    } & CommentsPartialUpdateUpvotesErrorComponent)
  | ({
      attr?: 'downvotes';
    } & CommentsPartialUpdateDownvotesErrorComponent);

export type CommentsPartialUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommentsPartialUpdatePathErrorComponent = {
  /**
   * * `path` - path
   */
  attr: 'path';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommentsPartialUpdateQuibblerAvatarErrorComponent = {
  /**
   * * `quibbler.avatar` - quibbler.avatar
   */
  attr: 'quibbler.avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommentsPartialUpdateQuibblerNonFieldErrorsErrorComponent = {
  /**
   * * `quibbler.non_field_errors` - quibbler.non_field_errors
   */
  attr: 'quibbler.non_field_errors';
  /**
   * * `invalid` - invalid
   * * `required` - required
   */
  code: 'invalid' | 'required';
  detail: string;
};

export type CommentsPartialUpdateQuibblerUsernameErrorComponent = {
  /**
   * * `quibbler.username` - quibbler.username
   */
  attr: 'quibbler.username';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommentsPartialUpdateRatioErrorComponent = {
  /**
   * * `ratio` - ratio
   */
  attr: 'ratio';
  /**
   * * `invalid` - invalid
   * * `max_string_length` - max_string_length
   * * `null` - null
   * * `required` - required
   */
  code: 'invalid' | 'max_string_length' | 'null' | 'required';
  detail: string;
};

export type CommentsPartialUpdateUpvotesErrorComponent = {
  /**
   * * `upvotes` - upvotes
   */
  attr: 'upvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommentsPartialUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<CommentsPartialUpdateError>;
};

export type CommentsUpdateCommenterErrorComponent = {
  /**
   * * `commenter` - commenter
   */
  attr: 'commenter';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   */
  code: 'does_not_exist' | 'incorrect_type';
  detail: string;
};

export type CommentsUpdateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommentsUpdateDeletedErrorComponent = {
  /**
   * * `deleted` - deleted
   */
  attr: 'deleted';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommentsUpdateDownvotesErrorComponent = {
  /**
   * * `downvotes` - downvotes
   */
  attr: 'downvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommentsUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & CommentsUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'quibbler.non_field_errors';
    } & CommentsUpdateQuibblerNonFieldErrorsErrorComponent)
  | ({
      attr?: 'quibbler.username';
    } & CommentsUpdateQuibblerUsernameErrorComponent)
  | ({
      attr?: 'quibbler.avatar';
    } & CommentsUpdateQuibblerAvatarErrorComponent)
  | ({
      attr?: 'ratio';
    } & CommentsUpdateRatioErrorComponent)
  | ({
      attr?: 'path';
    } & CommentsUpdatePathErrorComponent)
  | ({
      attr?: 'content';
    } & CommentsUpdateContentErrorComponent)
  | ({
      attr?: 'deleted';
    } & CommentsUpdateDeletedErrorComponent)
  | ({
      attr?: 'commenter';
    } & CommentsUpdateCommenterErrorComponent)
  | ({
      attr?: 'upvotes';
    } & CommentsUpdateUpvotesErrorComponent)
  | ({
      attr?: 'downvotes';
    } & CommentsUpdateDownvotesErrorComponent);

export type CommentsUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommentsUpdatePathErrorComponent = {
  /**
   * * `path` - path
   */
  attr: 'path';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommentsUpdateQuibblerAvatarErrorComponent = {
  /**
   * * `quibbler.avatar` - quibbler.avatar
   */
  attr: 'quibbler.avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommentsUpdateQuibblerNonFieldErrorsErrorComponent = {
  /**
   * * `quibbler.non_field_errors` - quibbler.non_field_errors
   */
  attr: 'quibbler.non_field_errors';
  /**
   * * `invalid` - invalid
   * * `required` - required
   */
  code: 'invalid' | 'required';
  detail: string;
};

export type CommentsUpdateQuibblerUsernameErrorComponent = {
  /**
   * * `quibbler.username` - quibbler.username
   */
  attr: 'quibbler.username';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommentsUpdateRatioErrorComponent = {
  /**
   * * `ratio` - ratio
   */
  attr: 'ratio';
  /**
   * * `invalid` - invalid
   * * `max_string_length` - max_string_length
   * * `null` - null
   * * `required` - required
   */
  code: 'invalid' | 'max_string_length' | 'null' | 'required';
  detail: string;
};

export type CommentsUpdateUpvotesErrorComponent = {
  /**
   * * `upvotes` - upvotes
   */
  attr: 'upvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommentsUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<CommentsUpdateError>;
};

export type CommunitiesCreateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesCreateBannerErrorComponent = {
  /**
   * * `banner` - banner
   */
  attr: 'banner';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesCreateDescriptionErrorComponent = {
  /**
   * * `description` - description
   */
  attr: 'description';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesCreateError =
  | ({
      attr?: 'non_field_errors';
    } & CommunitiesCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & CommunitiesCreateAvatarErrorComponent)
  | ({
      attr?: 'is_public';
    } & CommunitiesCreateIsPublicErrorComponent)
  | ({
      attr?: 'name';
    } & CommunitiesCreateNameErrorComponent)
  | ({
      attr?: 'description';
    } & CommunitiesCreateDescriptionErrorComponent)
  | ({
      attr?: 'title';
    } & CommunitiesCreateTitleErrorComponent)
  | ({
      attr?: 'banner';
    } & CommunitiesCreateBannerErrorComponent)
  | ({
      attr?: 'members';
    } & CommunitiesCreateMembersErrorComponent)
  | ({
      attr?: 'moderators';
    } & CommunitiesCreateModeratorsErrorComponent);

export type CommunitiesCreateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesCreateMembersErrorComponent = {
  /**
   * * `members` - members
   */
  attr: 'members';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesCreateModeratorsErrorComponent = {
  /**
   * * `moderators` - moderators
   */
  attr: 'moderators';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesCreateNameErrorComponent = {
  /**
   * * `name` - name
   */
  attr: 'name';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommunitiesCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesCreateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<CommunitiesCreateError>;
};

export type CommunitiesPartialUpdateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesPartialUpdateBannerErrorComponent = {
  /**
   * * `banner` - banner
   */
  attr: 'banner';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesPartialUpdateDescriptionErrorComponent = {
  /**
   * * `description` - description
   */
  attr: 'description';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesPartialUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & CommunitiesPartialUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & CommunitiesPartialUpdateAvatarErrorComponent)
  | ({
      attr?: 'is_public';
    } & CommunitiesPartialUpdateIsPublicErrorComponent)
  | ({
      attr?: 'name';
    } & CommunitiesPartialUpdateNameErrorComponent)
  | ({
      attr?: 'description';
    } & CommunitiesPartialUpdateDescriptionErrorComponent)
  | ({
      attr?: 'title';
    } & CommunitiesPartialUpdateTitleErrorComponent)
  | ({
      attr?: 'banner';
    } & CommunitiesPartialUpdateBannerErrorComponent)
  | ({
      attr?: 'members';
    } & CommunitiesPartialUpdateMembersErrorComponent)
  | ({
      attr?: 'moderators';
    } & CommunitiesPartialUpdateModeratorsErrorComponent);

export type CommunitiesPartialUpdateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesPartialUpdateMembersErrorComponent = {
  /**
   * * `members` - members
   */
  attr: 'members';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesPartialUpdateModeratorsErrorComponent = {
  /**
   * * `moderators` - moderators
   */
  attr: 'moderators';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesPartialUpdateNameErrorComponent = {
  /**
   * * `name` - name
   */
  attr: 'name';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommunitiesPartialUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesPartialUpdateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesPartialUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<CommunitiesPartialUpdateError>;
};

export type CommunitiesUpdateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesUpdateBannerErrorComponent = {
  /**
   * * `banner` - banner
   */
  attr: 'banner';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type CommunitiesUpdateDescriptionErrorComponent = {
  /**
   * * `description` - description
   */
  attr: 'description';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & CommunitiesUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & CommunitiesUpdateAvatarErrorComponent)
  | ({
      attr?: 'is_public';
    } & CommunitiesUpdateIsPublicErrorComponent)
  | ({
      attr?: 'name';
    } & CommunitiesUpdateNameErrorComponent)
  | ({
      attr?: 'description';
    } & CommunitiesUpdateDescriptionErrorComponent)
  | ({
      attr?: 'title';
    } & CommunitiesUpdateTitleErrorComponent)
  | ({
      attr?: 'banner';
    } & CommunitiesUpdateBannerErrorComponent)
  | ({
      attr?: 'members';
    } & CommunitiesUpdateMembersErrorComponent)
  | ({
      attr?: 'moderators';
    } & CommunitiesUpdateModeratorsErrorComponent);

export type CommunitiesUpdateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesUpdateMembersErrorComponent = {
  /**
   * * `members` - members
   */
  attr: 'members';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesUpdateModeratorsErrorComponent = {
  /**
   * * `moderators` - moderators
   */
  attr: 'moderators';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type CommunitiesUpdateNameErrorComponent = {
  /**
   * * `name` - name
   */
  attr: 'name';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type CommunitiesUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type CommunitiesUpdateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type CommunitiesUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<CommunitiesUpdateError>;
};

export type Community = {
  readonly id: number;
  avatar?: string | null;
  readonly created_at: string;
  is_public?: boolean;
  name: string;
  description: string;
  title?: string | null;
  banner?: string | null;
  members?: Array<number>;
  moderators?: Array<number>;
};

export type CommunityBasic = {
  name: string;
  avatar?: string | null;
};

export type CommunityDetailed = {
  readonly id: number;
  rangers: Array<ProfileBasic>;
  readonly quibs: number;
  avatar?: string | null;
  readonly created_at: string;
  is_public?: boolean;
  name: string;
  description: string;
  title?: string | null;
  banner?: string | null;
  members?: Array<number>;
  moderators?: Array<number>;
};

export type CommunityExists = {
  exists: boolean;
  name: string;
};

/**
 * Serializer for views returning just a response with detail key
 */
export type DetailResponse = {
  detail: string;
};

export type Error404 = {
  code: ErrorCode404Enum;
  detail: string;
  attr: string | null;
};

export type Error500 = {
  code: ErrorCode500Enum;
  detail: string;
  attr: string | null;
};

/**
 * * `not_found` - Not Found
 */
export type ErrorCode404Enum = 'not_found';

/**
 * * `error` - Error
 */
export type ErrorCode500Enum = 'error';

export type ErrorResponse404 = {
  type: ClientErrorEnum;
  errors: Array<Error404>;
};

export type ErrorResponse500 = {
  type: ServerErrorEnum;
  errors: Array<Error500>;
};

export type PatchedCommentDetail = {
  readonly id?: number;
  quibbler?: ProfileBasic | null;
  ratio?: number;
  path?: string;
  readonly created_at?: string;
  content?: string;
  deleted?: boolean;
  commenter?: number | null;
  upvotes?: Array<number>;
  downvotes?: Array<number>;
};

export type PatchedCommunity = {
  readonly id?: number;
  avatar?: string | null;
  readonly created_at?: string;
  is_public?: boolean;
  name?: string;
  description?: string;
  title?: string | null;
  banner?: string | null;
  members?: Array<number>;
  moderators?: Array<number>;
};

export type PatchedPost = {
  readonly id?: string;
  community?: CommunityBasic;
  poster?: ProfileBasic;
  readonly created_at?: string;
  is_public?: boolean;
  highlighted?: boolean;
  title?: string;
  slug?: string;
  content?: string;
  cover?: string | null;
  upvotes?: Array<number>;
  downvotes?: Array<number>;
  comments?: Array<number>;
};

export type PatchedProfile = {
  readonly id?: number;
  user?: User;
  avatar?: string | null;
  readonly created_at?: string;
  /**
   * Required. 25 characters or fewer. Letters, digits and ./_ only.
   */
  username?: string;
  first_name?: string | null;
  last_name?: string | null;
  bio?: string | null;
};

export type Post = {
  readonly id: string;
  community: CommunityBasic;
  poster: ProfileBasic;
  readonly created_at: string;
  is_public?: boolean;
  highlighted?: boolean;
  title: string;
  slug?: string;
  content?: string;
  cover?: string | null;
  upvotes?: Array<number>;
  downvotes?: Array<number>;
  comments?: Array<number>;
};

export type PostHighlighted = {
  cover?: string | null;
  title: string;
  readonly id: string;
  slug?: string;
  readonly created_at: string;
};

export type PostsCommentsCreateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsCommentsCreateError =
  | ({
      attr?: 'non_field_errors';
    } & PostsCommentsCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'path';
    } & PostsCommentsCreatePathErrorComponent)
  | ({
      attr?: 'content';
    } & PostsCommentsCreateContentErrorComponent);

export type PostsCommentsCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsCommentsCreatePathErrorComponent = {
  /**
   * * `path` - path
   */
  attr: 'path';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsCommentsCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<PostsCommentsCreateError>;
};

export type PostsCreateCommentsErrorComponent = {
  /**
   * * `comments` - comments
   */
  attr: 'comments';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsCreateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsCreateCoverErrorComponent = {
  /**
   * * `cover` - cover
   */
  attr: 'cover';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type PostsCreateDownvotesErrorComponent = {
  /**
   * * `downvotes` - downvotes
   */
  attr: 'downvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsCreateError =
  | ({
      attr?: 'non_field_errors';
    } & PostsCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'is_public';
    } & PostsCreateIsPublicErrorComponent)
  | ({
      attr?: 'highlighted';
    } & PostsCreateHighlightedErrorComponent)
  | ({
      attr?: 'title';
    } & PostsCreateTitleErrorComponent)
  | ({
      attr?: 'slug';
    } & PostsCreateSlugErrorComponent)
  | ({
      attr?: 'content';
    } & PostsCreateContentErrorComponent)
  | ({
      attr?: 'cover';
    } & PostsCreateCoverErrorComponent)
  | ({
      attr?: 'upvotes';
    } & PostsCreateUpvotesErrorComponent)
  | ({
      attr?: 'downvotes';
    } & PostsCreateDownvotesErrorComponent)
  | ({
      attr?: 'comments';
    } & PostsCreateCommentsErrorComponent);

export type PostsCreateHighlightedErrorComponent = {
  /**
   * * `highlighted` - highlighted
   */
  attr: 'highlighted';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsCreateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsCreateSlugErrorComponent = {
  /**
   * * `slug` - slug
   */
  attr: 'slug';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsCreateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsCreateUpvotesErrorComponent = {
  /**
   * * `upvotes` - upvotes
   */
  attr: 'upvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<PostsCreateError>;
};

export type PostsPartialUpdateCommentsErrorComponent = {
  /**
   * * `comments` - comments
   */
  attr: 'comments';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsPartialUpdateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsPartialUpdateCoverErrorComponent = {
  /**
   * * `cover` - cover
   */
  attr: 'cover';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type PostsPartialUpdateDownvotesErrorComponent = {
  /**
   * * `downvotes` - downvotes
   */
  attr: 'downvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsPartialUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & PostsPartialUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'is_public';
    } & PostsPartialUpdateIsPublicErrorComponent)
  | ({
      attr?: 'highlighted';
    } & PostsPartialUpdateHighlightedErrorComponent)
  | ({
      attr?: 'title';
    } & PostsPartialUpdateTitleErrorComponent)
  | ({
      attr?: 'slug';
    } & PostsPartialUpdateSlugErrorComponent)
  | ({
      attr?: 'content';
    } & PostsPartialUpdateContentErrorComponent)
  | ({
      attr?: 'cover';
    } & PostsPartialUpdateCoverErrorComponent)
  | ({
      attr?: 'upvotes';
    } & PostsPartialUpdateUpvotesErrorComponent)
  | ({
      attr?: 'downvotes';
    } & PostsPartialUpdateDownvotesErrorComponent)
  | ({
      attr?: 'comments';
    } & PostsPartialUpdateCommentsErrorComponent);

export type PostsPartialUpdateHighlightedErrorComponent = {
  /**
   * * `highlighted` - highlighted
   */
  attr: 'highlighted';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsPartialUpdateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsPartialUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsPartialUpdateSlugErrorComponent = {
  /**
   * * `slug` - slug
   */
  attr: 'slug';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsPartialUpdateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsPartialUpdateUpvotesErrorComponent = {
  /**
   * * `upvotes` - upvotes
   */
  attr: 'upvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsPartialUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<PostsPartialUpdateError>;
};

export type PostsUpdateCommentsErrorComponent = {
  /**
   * * `comments` - comments
   */
  attr: 'comments';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsUpdateContentErrorComponent = {
  /**
   * * `content` - content
   */
  attr: 'content';
  /**
   * * `invalid` - invalid
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsUpdateCoverErrorComponent = {
  /**
   * * `cover` - cover
   */
  attr: 'cover';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type PostsUpdateDownvotesErrorComponent = {
  /**
   * * `downvotes` - downvotes
   */
  attr: 'downvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & PostsUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'is_public';
    } & PostsUpdateIsPublicErrorComponent)
  | ({
      attr?: 'highlighted';
    } & PostsUpdateHighlightedErrorComponent)
  | ({
      attr?: 'title';
    } & PostsUpdateTitleErrorComponent)
  | ({
      attr?: 'slug';
    } & PostsUpdateSlugErrorComponent)
  | ({
      attr?: 'content';
    } & PostsUpdateContentErrorComponent)
  | ({
      attr?: 'cover';
    } & PostsUpdateCoverErrorComponent)
  | ({
      attr?: 'upvotes';
    } & PostsUpdateUpvotesErrorComponent)
  | ({
      attr?: 'downvotes';
    } & PostsUpdateDownvotesErrorComponent)
  | ({
      attr?: 'comments';
    } & PostsUpdateCommentsErrorComponent);

export type PostsUpdateHighlightedErrorComponent = {
  /**
   * * `highlighted` - highlighted
   */
  attr: 'highlighted';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsUpdateIsPublicErrorComponent = {
  /**
   * * `is_public` - is_public
   */
  attr: 'is_public';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type PostsUpdateSlugErrorComponent = {
  /**
   * * `slug` - slug
   */
  attr: 'slug';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsUpdateTitleErrorComponent = {
  /**
   * * `title` - title
   */
  attr: 'title';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type PostsUpdateUpvotesErrorComponent = {
  /**
   * * `upvotes` - upvotes
   */
  attr: 'upvotes';
  /**
   * * `does_not_exist` - does_not_exist
   * * `incorrect_type` - incorrect_type
   * * `not_a_list` - not_a_list
   * * `null` - null
   */
  code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
  detail: string;
};

export type PostsUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<PostsUpdateError>;
};

export type Profile = {
  readonly id: number;
  user: User;
  avatar?: string | null;
  readonly created_at: string;
  /**
   * Required. 25 characters or fewer. Letters, digits and ./_ only.
   */
  username: string;
  first_name?: string | null;
  last_name?: string | null;
  bio?: string | null;
};

export type ProfileBasic = {
  /**
   * Required. 25 characters or fewer. Letters, digits and ./_ only.
   */
  username: string;
  avatar?: string | null;
  readonly name: string | null;
};

/**
 * * `server_error` - Server Error
 */
export type ServerErrorEnum = 'server_error';

export type User = {
  readonly id: number;
  email: string;
  password: string;
  readonly date_joined: string;
};

export type UsersMeProfilesCreateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type UsersMeProfilesCreateBioErrorComponent = {
  /**
   * * `bio` - bio
   */
  attr: 'bio';
  /**
   * * `invalid` - invalid
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesCreateError =
  | ({
      attr?: 'non_field_errors';
    } & UsersMeProfilesCreateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & UsersMeProfilesCreateAvatarErrorComponent)
  | ({
      attr?: 'username';
    } & UsersMeProfilesCreateUsernameErrorComponent)
  | ({
      attr?: 'first_name';
    } & UsersMeProfilesCreateFirstNameErrorComponent)
  | ({
      attr?: 'last_name';
    } & UsersMeProfilesCreateLastNameErrorComponent)
  | ({
      attr?: 'bio';
    } & UsersMeProfilesCreateBioErrorComponent);

export type UsersMeProfilesCreateFirstNameErrorComponent = {
  /**
   * * `first_name` - first_name
   */
  attr: 'first_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesCreateLastNameErrorComponent = {
  /**
   * * `last_name` - last_name
   */
  attr: 'last_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesCreateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type UsersMeProfilesCreateUsernameErrorComponent = {
  /**
   * * `username` - username
   */
  attr: 'username';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type UsersMeProfilesCreateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<UsersMeProfilesCreateError>;
};

export type UsersMeProfilesPartialUpdateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type UsersMeProfilesPartialUpdateBioErrorComponent = {
  /**
   * * `bio` - bio
   */
  attr: 'bio';
  /**
   * * `invalid` - invalid
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesPartialUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & UsersMeProfilesPartialUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & UsersMeProfilesPartialUpdateAvatarErrorComponent)
  | ({
      attr?: 'username';
    } & UsersMeProfilesPartialUpdateUsernameErrorComponent)
  | ({
      attr?: 'first_name';
    } & UsersMeProfilesPartialUpdateFirstNameErrorComponent)
  | ({
      attr?: 'last_name';
    } & UsersMeProfilesPartialUpdateLastNameErrorComponent)
  | ({
      attr?: 'bio';
    } & UsersMeProfilesPartialUpdateBioErrorComponent);

export type UsersMeProfilesPartialUpdateFirstNameErrorComponent = {
  /**
   * * `first_name` - first_name
   */
  attr: 'first_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesPartialUpdateLastNameErrorComponent = {
  /**
   * * `last_name` - last_name
   */
  attr: 'last_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesPartialUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type UsersMeProfilesPartialUpdateUsernameErrorComponent = {
  /**
   * * `username` - username
   */
  attr: 'username';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type UsersMeProfilesPartialUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<UsersMeProfilesPartialUpdateError>;
};

export type UsersMeProfilesUpdateAvatarErrorComponent = {
  /**
   * * `avatar` - avatar
   */
  attr: 'avatar';
  /**
   * * `empty` - empty
   * * `invalid` - invalid
   * * `invalid_image` - invalid_image
   * * `max_length` - max_length
   * * `no_name` - no_name
   */
  code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
  detail: string;
};

export type UsersMeProfilesUpdateBioErrorComponent = {
  /**
   * * `bio` - bio
   */
  attr: 'bio';
  /**
   * * `invalid` - invalid
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesUpdateError =
  | ({
      attr?: 'non_field_errors';
    } & UsersMeProfilesUpdateNonFieldErrorsErrorComponent)
  | ({
      attr?: 'avatar';
    } & UsersMeProfilesUpdateAvatarErrorComponent)
  | ({
      attr?: 'username';
    } & UsersMeProfilesUpdateUsernameErrorComponent)
  | ({
      attr?: 'first_name';
    } & UsersMeProfilesUpdateFirstNameErrorComponent)
  | ({
      attr?: 'last_name';
    } & UsersMeProfilesUpdateLastNameErrorComponent)
  | ({
      attr?: 'bio';
    } & UsersMeProfilesUpdateBioErrorComponent);

export type UsersMeProfilesUpdateFirstNameErrorComponent = {
  /**
   * * `first_name` - first_name
   */
  attr: 'first_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesUpdateLastNameErrorComponent = {
  /**
   * * `last_name` - last_name
   */
  attr: 'last_name';
  /**
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   */
  code:
    | 'invalid'
    | 'max_length'
    | 'null_characters_not_allowed'
    | 'surrogate_characters_not_allowed';
  detail: string;
};

export type UsersMeProfilesUpdateNonFieldErrorsErrorComponent = {
  /**
   * * `non_field_errors` - non_field_errors
   */
  attr: 'non_field_errors';
  /**
   * * `invalid` - invalid
   * * `null` - null
   */
  code: 'invalid' | 'null';
  detail: string;
};

export type UsersMeProfilesUpdateUsernameErrorComponent = {
  /**
   * * `username` - username
   */
  attr: 'username';
  /**
   * * `blank` - blank
   * * `invalid` - invalid
   * * `max_length` - max_length
   * * `null` - null
   * * `null_characters_not_allowed` - null_characters_not_allowed
   * * `required` - required
   * * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
   * * `unique` - unique
   */
  code:
    | 'blank'
    | 'invalid'
    | 'max_length'
    | 'null'
    | 'null_characters_not_allowed'
    | 'required'
    | 'surrogate_characters_not_allowed'
    | 'unique';
  detail: string;
};

export type UsersMeProfilesUpdateValidationError = {
  type: ValidationErrorEnum;
  errors: Array<UsersMeProfilesUpdateError>;
};

/**
 * * `validation_error` - Validation Error
 */
export type ValidationErrorEnum = 'validation_error';

export type AuthLoginCreateData = {
  body: Auth;
  path?: never;
  query?: never;
  url: '/api/v1/auth/login/';
};

export type AuthLoginCreateErrors = {
  400: AuthLoginCreateValidationError;
  500: ErrorResponse500;
};

export type AuthLoginCreateError2 = AuthLoginCreateErrors[keyof AuthLoginCreateErrors];

export type AuthLoginCreateResponses = {
  200: AuthToken;
};

export type AuthLoginCreateResponse =
  AuthLoginCreateResponses[keyof AuthLoginCreateResponses];

export type AuthLogoutCreateData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/auth/logout/';
};

export type AuthLogoutCreateErrors = {
  500: ErrorResponse500;
};

export type AuthLogoutCreateError = AuthLogoutCreateErrors[keyof AuthLogoutCreateErrors];

export type AuthLogoutCreateResponses = {
  200: DetailResponse;
};

export type AuthLogoutCreateResponse =
  AuthLogoutCreateResponses[keyof AuthLogoutCreateResponses];

export type AuthRegisterCreateData = {
  body: Auth;
  path?: never;
  query?: never;
  url: '/api/v1/auth/register/';
};

export type AuthRegisterCreateErrors = {
  400: AuthRegisterCreateValidationError;
  500: ErrorResponse500;
};

export type AuthRegisterCreateError2 =
  AuthRegisterCreateErrors[keyof AuthRegisterCreateErrors];

export type AuthRegisterCreateResponses = {
  201: Auth;
};

export type AuthRegisterCreateResponse =
  AuthRegisterCreateResponses[keyof AuthRegisterCreateResponses];

export type CommentsDestroyData = {
  body?: never;
  path: {
    /**
     * A unique integer value identifying this Comment.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/comments/{id}/';
};

export type CommentsDestroyErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommentsDestroyError = CommentsDestroyErrors[keyof CommentsDestroyErrors];

export type CommentsDestroyResponses = {
  /**
   * No response body
   */
  204: void;
};

export type CommentsDestroyResponse =
  CommentsDestroyResponses[keyof CommentsDestroyResponses];

export type CommentsRetrieveData = {
  body?: never;
  path: {
    /**
     * A unique integer value identifying this Comment.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/comments/{id}/';
};

export type CommentsRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommentsRetrieveError = CommentsRetrieveErrors[keyof CommentsRetrieveErrors];

export type CommentsRetrieveResponses = {
  200: CommentDetail;
};

export type CommentsRetrieveResponse =
  CommentsRetrieveResponses[keyof CommentsRetrieveResponses];

export type CommentsPartialUpdateData = {
  body?: PatchedCommentDetail;
  path: {
    /**
     * A unique integer value identifying this Comment.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/comments/{id}/';
};

export type CommentsPartialUpdateErrors = {
  400: CommentsPartialUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommentsPartialUpdateError2 =
  CommentsPartialUpdateErrors[keyof CommentsPartialUpdateErrors];

export type CommentsPartialUpdateResponses = {
  200: CommentDetail;
};

export type CommentsPartialUpdateResponse =
  CommentsPartialUpdateResponses[keyof CommentsPartialUpdateResponses];

export type CommentsUpdateData = {
  body: CommentDetail;
  path: {
    /**
     * A unique integer value identifying this Comment.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/comments/{id}/';
};

export type CommentsUpdateErrors = {
  400: CommentsUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommentsUpdateError2 = CommentsUpdateErrors[keyof CommentsUpdateErrors];

export type CommentsUpdateResponses = {
  200: CommentDetail;
};

export type CommentsUpdateResponse = CommentsUpdateResponses[keyof CommentsUpdateResponses];

export type CommunitiesListData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/communities/';
};

export type CommunitiesListErrors = {
  500: ErrorResponse500;
};

export type CommunitiesListError = CommunitiesListErrors[keyof CommunitiesListErrors];

export type CommunitiesListResponses = {
  200: Array<Community>;
};

export type CommunitiesListResponse =
  CommunitiesListResponses[keyof CommunitiesListResponses];

export type CommunitiesCreateData = {
  body: Community;
  path?: never;
  query?: never;
  url: '/api/v1/communities/';
};

export type CommunitiesCreateErrors = {
  400: CommunitiesCreateValidationError;
  500: ErrorResponse500;
};

export type CommunitiesCreateError2 =
  CommunitiesCreateErrors[keyof CommunitiesCreateErrors];

export type CommunitiesCreateResponses = {
  201: Community;
};

export type CommunitiesCreateResponse =
  CommunitiesCreateResponses[keyof CommunitiesCreateResponses];

export type CommunitiesDestroyData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/';
};

export type CommunitiesDestroyErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesDestroyError =
  CommunitiesDestroyErrors[keyof CommunitiesDestroyErrors];

export type CommunitiesDestroyResponses = {
  /**
   * No response body
   */
  204: void;
};

export type CommunitiesDestroyResponse =
  CommunitiesDestroyResponses[keyof CommunitiesDestroyResponses];

export type CommunitiesRetrieveData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/';
};

export type CommunitiesRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesRetrieveError =
  CommunitiesRetrieveErrors[keyof CommunitiesRetrieveErrors];

export type CommunitiesRetrieveResponses = {
  200: CommunityDetailed;
};

export type CommunitiesRetrieveResponse =
  CommunitiesRetrieveResponses[keyof CommunitiesRetrieveResponses];

export type CommunitiesPartialUpdateData = {
  body?: PatchedCommunity;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/';
};

export type CommunitiesPartialUpdateErrors = {
  400: CommunitiesPartialUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesPartialUpdateError2 =
  CommunitiesPartialUpdateErrors[keyof CommunitiesPartialUpdateErrors];

export type CommunitiesPartialUpdateResponses = {
  200: Community;
};

export type CommunitiesPartialUpdateResponse =
  CommunitiesPartialUpdateResponses[keyof CommunitiesPartialUpdateResponses];

export type CommunitiesUpdateData = {
  body: Community;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/';
};

export type CommunitiesUpdateErrors = {
  400: CommunitiesUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesUpdateError2 =
  CommunitiesUpdateErrors[keyof CommunitiesUpdateErrors];

export type CommunitiesUpdateResponses = {
  200: Community;
};

export type CommunitiesUpdateResponse =
  CommunitiesUpdateResponses[keyof CommunitiesUpdateResponses];

export type CommunitiesExistsRetrieveData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/exists/';
};

export type CommunitiesExistsRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesExistsRetrieveError =
  CommunitiesExistsRetrieveErrors[keyof CommunitiesExistsRetrieveErrors];

export type CommunitiesExistsRetrieveResponses = {
  200: CommunityExists;
};

export type CommunitiesExistsRetrieveResponse =
  CommunitiesExistsRetrieveResponses[keyof CommunitiesExistsRetrieveResponses];

export type CommunitiesHighlightedPostsListData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/highlighted_posts/';
};

export type CommunitiesHighlightedPostsListErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesHighlightedPostsListError =
  CommunitiesHighlightedPostsListErrors[keyof CommunitiesHighlightedPostsListErrors];

export type CommunitiesHighlightedPostsListResponses = {
  200: Array<PostHighlighted>;
};

export type CommunitiesHighlightedPostsListResponse =
  CommunitiesHighlightedPostsListResponses[keyof CommunitiesHighlightedPostsListResponses];

export type CommunitiesPostsListData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/v1/communities/{name}/posts/';
};

export type CommunitiesPostsListErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type CommunitiesPostsListError =
  CommunitiesPostsListErrors[keyof CommunitiesPostsListErrors];

export type CommunitiesPostsListResponses = {
  200: Array<Post>;
};

export type CommunitiesPostsListResponse =
  CommunitiesPostsListResponses[keyof CommunitiesPostsListResponses];

export type PostsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/posts/';
};

export type PostsListErrors = {
  500: ErrorResponse500;
};

export type PostsListError = PostsListErrors[keyof PostsListErrors];

export type PostsListResponses = {
  200: Array<Post>;
};

export type PostsListResponse = PostsListResponses[keyof PostsListResponses];

export type PostsCreateData = {
  body: Post;
  path?: never;
  query?: never;
  url: '/api/v1/posts/';
};

export type PostsCreateErrors = {
  400: PostsCreateValidationError;
  500: ErrorResponse500;
};

export type PostsCreateError2 = PostsCreateErrors[keyof PostsCreateErrors];

export type PostsCreateResponses = {
  201: Post;
};

export type PostsCreateResponse = PostsCreateResponses[keyof PostsCreateResponses];

export type PostsDestroyData = {
  body?: never;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/';
};

export type PostsDestroyErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsDestroyError = PostsDestroyErrors[keyof PostsDestroyErrors];

export type PostsDestroyResponses = {
  /**
   * No response body
   */
  204: void;
};

export type PostsDestroyResponse = PostsDestroyResponses[keyof PostsDestroyResponses];

export type PostsRetrieveData = {
  body?: never;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/';
};

export type PostsRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsRetrieveError = PostsRetrieveErrors[keyof PostsRetrieveErrors];

export type PostsRetrieveResponses = {
  200: Post;
};

export type PostsRetrieveResponse = PostsRetrieveResponses[keyof PostsRetrieveResponses];

export type PostsPartialUpdateData = {
  body?: PatchedPost;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/';
};

export type PostsPartialUpdateErrors = {
  400: PostsPartialUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsPartialUpdateError2 =
  PostsPartialUpdateErrors[keyof PostsPartialUpdateErrors];

export type PostsPartialUpdateResponses = {
  200: Post;
};

export type PostsPartialUpdateResponse =
  PostsPartialUpdateResponses[keyof PostsPartialUpdateResponses];

export type PostsUpdateData = {
  body: Post;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/';
};

export type PostsUpdateErrors = {
  400: PostsUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsUpdateError2 = PostsUpdateErrors[keyof PostsUpdateErrors];

export type PostsUpdateResponses = {
  200: Post;
};

export type PostsUpdateResponse = PostsUpdateResponses[keyof PostsUpdateResponses];

export type PostsCommentsListData = {
  body?: never;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/comments/';
};

export type PostsCommentsListErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsCommentsListError = PostsCommentsListErrors[keyof PostsCommentsListErrors];

export type PostsCommentsListResponses = {
  200: Array<CommentDetail>;
};

export type PostsCommentsListResponse =
  PostsCommentsListResponses[keyof PostsCommentsListResponses];

export type PostsCommentsCreateData = {
  body: CommentCreate;
  path: {
    /**
     * A unique value identifying this Post.
     */
    id: string;
  };
  query?: never;
  url: '/api/v1/posts/{id}/comments/';
};

export type PostsCommentsCreateErrors = {
  400: PostsCommentsCreateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type PostsCommentsCreateError2 =
  PostsCommentsCreateErrors[keyof PostsCommentsCreateErrors];

export type PostsCommentsCreateResponses = {
  200: Array<CommentDetail>;
};

export type PostsCommentsCreateResponse =
  PostsCommentsCreateResponses[keyof PostsCommentsCreateResponses];

export type UsersMeRetrieveData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/users/me/';
};

export type UsersMeRetrieveErrors = {
  500: ErrorResponse500;
};

export type UsersMeRetrieveError = UsersMeRetrieveErrors[keyof UsersMeRetrieveErrors];

export type UsersMeRetrieveResponses = {
  200: Profile;
};

export type UsersMeRetrieveResponse =
  UsersMeRetrieveResponses[keyof UsersMeRetrieveResponses];

export type UsersMeProfilesListData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/users/me/profiles/';
};

export type UsersMeProfilesListErrors = {
  500: ErrorResponse500;
};

export type UsersMeProfilesListError =
  UsersMeProfilesListErrors[keyof UsersMeProfilesListErrors];

export type UsersMeProfilesListResponses = {
  200: Array<Profile>;
};

export type UsersMeProfilesListResponse =
  UsersMeProfilesListResponses[keyof UsersMeProfilesListResponses];

export type UsersMeProfilesCreateData = {
  body: Profile;
  path?: never;
  query?: never;
  url: '/api/v1/users/me/profiles/';
};

export type UsersMeProfilesCreateErrors = {
  400: UsersMeProfilesCreateValidationError;
  500: ErrorResponse500;
};

export type UsersMeProfilesCreateError2 =
  UsersMeProfilesCreateErrors[keyof UsersMeProfilesCreateErrors];

export type UsersMeProfilesCreateResponses = {
  201: Profile;
};

export type UsersMeProfilesCreateResponse =
  UsersMeProfilesCreateResponses[keyof UsersMeProfilesCreateResponses];

export type UsersMeProfilesDestroyData = {
  body?: never;
  path: {
    /**
     * A unique integer value identifying this Profile.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/users/me/profiles/{id}/';
};

export type UsersMeProfilesDestroyErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type UsersMeProfilesDestroyError =
  UsersMeProfilesDestroyErrors[keyof UsersMeProfilesDestroyErrors];

export type UsersMeProfilesDestroyResponses = {
  /**
   * No response body
   */
  204: void;
};

export type UsersMeProfilesDestroyResponse =
  UsersMeProfilesDestroyResponses[keyof UsersMeProfilesDestroyResponses];

export type UsersMeProfilesRetrieveData = {
  body?: never;
  path: {
    /**
     * A unique integer value identifying this Profile.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/users/me/profiles/{id}/';
};

export type UsersMeProfilesRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type UsersMeProfilesRetrieveError =
  UsersMeProfilesRetrieveErrors[keyof UsersMeProfilesRetrieveErrors];

export type UsersMeProfilesRetrieveResponses = {
  200: Profile;
};

export type UsersMeProfilesRetrieveResponse =
  UsersMeProfilesRetrieveResponses[keyof UsersMeProfilesRetrieveResponses];

export type UsersMeProfilesPartialUpdateData = {
  body?: PatchedProfile;
  path: {
    /**
     * A unique integer value identifying this Profile.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/users/me/profiles/{id}/';
};

export type UsersMeProfilesPartialUpdateErrors = {
  400: UsersMeProfilesPartialUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type UsersMeProfilesPartialUpdateError2 =
  UsersMeProfilesPartialUpdateErrors[keyof UsersMeProfilesPartialUpdateErrors];

export type UsersMeProfilesPartialUpdateResponses = {
  200: Profile;
};

export type UsersMeProfilesPartialUpdateResponse =
  UsersMeProfilesPartialUpdateResponses[keyof UsersMeProfilesPartialUpdateResponses];

export type UsersMeProfilesUpdateData = {
  body: Profile;
  path: {
    /**
     * A unique integer value identifying this Profile.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/users/me/profiles/{id}/';
};

export type UsersMeProfilesUpdateErrors = {
  400: UsersMeProfilesUpdateValidationError;
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type UsersMeProfilesUpdateError2 =
  UsersMeProfilesUpdateErrors[keyof UsersMeProfilesUpdateErrors];

export type UsersMeProfilesUpdateResponses = {
  200: Profile;
};

export type UsersMeProfilesUpdateResponse =
  UsersMeProfilesUpdateResponses[keyof UsersMeProfilesUpdateResponses];

export type UsersProfilesListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A search term.
     */
    search?: string;
  };
  url: '/api/v1/users/profiles/';
};

export type UsersProfilesListErrors = {
  500: ErrorResponse500;
};

export type UsersProfilesListError = UsersProfilesListErrors[keyof UsersProfilesListErrors];

export type UsersProfilesListResponses = {
  200: Array<Profile>;
};

export type UsersProfilesListResponse =
  UsersProfilesListResponses[keyof UsersProfilesListResponses];

export type UsersProfilesRetrieveData = {
  body?: never;
  path: {
    /**
     * A unique integer value identifying this Profile.
     */
    id: number;
  };
  query?: never;
  url: '/api/v1/users/profiles/{id}/';
};

export type UsersProfilesRetrieveErrors = {
  404: ErrorResponse404;
  500: ErrorResponse500;
};

export type UsersProfilesRetrieveError =
  UsersProfilesRetrieveErrors[keyof UsersProfilesRetrieveErrors];

export type UsersProfilesRetrieveResponses = {
  200: Profile;
};

export type UsersProfilesRetrieveResponse =
  UsersProfilesRetrieveResponses[keyof UsersProfilesRetrieveResponses];
