/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/comments/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description A viewset that provides `update`, `retrieve`, and `destroy` actions.
     *
     *     To use it, override the class and set the `.queryset` and
     *     `.serializer_class` attributes. */
    get: operations['comments_retrieve'];
    /** @description A viewset that provides `update`, `retrieve`, and `destroy` actions.
     *
     *     To use it, override the class and set the `.queryset` and
     *     `.serializer_class` attributes. */
    put: operations['comments_update'];
    post?: never;
    /** @description A viewset that provides `update`, `retrieve`, and `destroy` actions.
     *
     *     To use it, override the class and set the `.queryset` and
     *     `.serializer_class` attributes. */
    delete: operations['comments_destroy'];
    options?: never;
    head?: never;
    /** @description A viewset that provides `update`, `retrieve`, and `destroy` actions.
     *
     *     To use it, override the class and set the `.queryset` and
     *     `.serializer_class` attributes. */
    patch: operations['comments_partial_update'];
    trace?: never;
  };
  '/comments/{id}/reaction/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** @description This endpoint allows a user to either upvote or downvote a comment.
     *
     *     Request Body:
     *     - `action` (str): Either `"upvote"` or `"downvote"`.
     *
     *     Responses:
     *     - `200 OK`: Reaction applied successfully. Returns `{"success": True}`.
     *     - `400 Bad Request`: If the user has already applied the same reaction or an invalid action is provided. */
    patch: operations['comments_reaction_partial_update'];
    trace?: never;
  };
  '/communities/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['communities_list'];
    put?: never;
    post: operations['communities_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/communities/{name}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['communities_retrieve'];
    put: operations['communities_update'];
    post?: never;
    delete: operations['communities_destroy'];
    options?: never;
    head?: never;
    patch: operations['communities_partial_update'];
    trace?: never;
  };
  '/communities/{name}/exists/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['communities_exists_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/communities/{name}/highlighted_posts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['communities_highlighted_posts_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/communities/{name}/posts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['communities_posts_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['posts_list'];
    put?: never;
    post: operations['posts_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/posts/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['posts_retrieve'];
    put: operations['posts_update'];
    post?: never;
    delete: operations['posts_destroy'];
    options?: never;
    head?: never;
    patch: operations['posts_partial_update'];
    trace?: never;
  };
  '/posts/{id}/comments/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['posts_comments_list'];
    put?: never;
    post: operations['posts_comments_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/login/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Customized drf basic token authentication.
     *
     *     This view authenticates the user using email and password credentials
     *     and issues a token upon successful login. */
    post: operations['u_login_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/logout/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description View to handle user logout by deleting the authentication token. */
    post: operations['u_logout_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/me/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description View to retrieve information for the currently authenticated user.
     *
     *     - `get`: Returns the details of the authenticated user based on their token.
     *
     *     Permission:
     *     - Requires user authentication. */
    get: operations['u_me_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/me/profiles/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    get: operations['u_me_profiles_list'];
    put?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    post: operations['u_me_profiles_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/me/profiles/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    get: operations['u_me_profiles_retrieve'];
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    put: operations['u_me_profiles_update'];
    post?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    delete: operations['u_me_profiles_destroy'];
    options?: never;
    head?: never;
    /** @description ViewSet to manage profiles associated with the authenticated user.
     *
     *     Permissions:
     *     - Requires user authentication to access and modify profiles. */
    patch: operations['u_me_profiles_partial_update'];
    trace?: never;
  };
  '/u/profiles/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet for performing read-only operations on the Profile model.
     *
     *     Filtering:
     *     - Allows searching profiles by username. */
    get: operations['u_profiles_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ViewSet for performing read-only operations on the Profile model.
     *
     *     Filtering:
     *     - Allows searching profiles by username. */
    get: operations['u_profiles_retrieve'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/comments/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a list of comments by the user, ordered by date. */
    get: operations['u_profiles_comments_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/downvoted/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a mixed list of downvoted posts and comments by the user, ordered by date. */
    get: operations['u_profiles_downvoted_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/overview/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a mixed list of posts and comments by the user, ordered by date. */
    get: operations['u_profiles_overview_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/posts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a list of posts by the user, ordered by date. */
    get: operations['u_profiles_posts_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/profiles/{id}/upvoted/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Returns a mixed list of upvoted posts and comments by the user, ordered by date. */
    get: operations['u_profiles_upvoted_list'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/u/register/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description View to handle registering of new users. */
    post: operations['u_register_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Auth: {
      /**
       * Email address
       * Format: email
       */
      email: string;
      password: string;
    };
    AuthToken: {
      token: string;
    };
    /**
     * @description * `client_error` - Client Error
     * @enum {string}
     */
    ClientErrorEnum: 'client_error';
    CommentCreate: {
      path?: string;
      content: string;
    };
    CommentDetail: {
      readonly id: number;
      commenter: components['schemas']['ProfileBasic'] | null;
      ratio: number;
      path: string;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
      content: string;
      deleted?: boolean;
      upvotes?: number[];
      downvotes?: number[];
    };
    CommentsPartialUpdateCommenterAvatarErrorComponent: {
      /**
       * @description * `commenter.avatar` - commenter.avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommentsPartialUpdateCommenterNonFieldErrorsErrorComponent: {
      /**
       * @description * `commenter.non_field_errors` - commenter.non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `required` - required
       * @enum {string}
       */
      code: 'invalid' | 'required';
      detail: string;
    };
    CommentsPartialUpdateCommenterUsernameErrorComponent: {
      /**
       * @description * `commenter.username` - commenter.username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommentsPartialUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommentsPartialUpdateDeletedErrorComponent: {
      /**
       * @description * `deleted` - deleted (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'deleted';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommentsPartialUpdateDownvotesErrorComponent: {
      /**
       * @description * `downvotes` - downvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'downvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommentsPartialUpdateError:
      | components['schemas']['CommentsPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['CommentsPartialUpdateCommenterNonFieldErrorsErrorComponent']
      | components['schemas']['CommentsPartialUpdateCommenterUsernameErrorComponent']
      | components['schemas']['CommentsPartialUpdateCommenterAvatarErrorComponent']
      | components['schemas']['CommentsPartialUpdateRatioErrorComponent']
      | components['schemas']['CommentsPartialUpdatePathErrorComponent']
      | components['schemas']['CommentsPartialUpdateContentErrorComponent']
      | components['schemas']['CommentsPartialUpdateDeletedErrorComponent']
      | components['schemas']['CommentsPartialUpdateUpvotesErrorComponent']
      | components['schemas']['CommentsPartialUpdateDownvotesErrorComponent'];
    CommentsPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommentsPartialUpdatePathErrorComponent: {
      /**
       * @description * `path` - path (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'path';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommentsPartialUpdateRatioErrorComponent: {
      /**
       * @description * `ratio` - ratio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'ratio';
      /**
       * @description * `invalid` - invalid
       *     * `max_string_length` - max_string_length
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'invalid' | 'max_string_length' | 'null' | 'required';
      detail: string;
    };
    CommentsPartialUpdateUpvotesErrorComponent: {
      /**
       * @description * `upvotes` - upvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'upvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommentsPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommentsPartialUpdateError'][];
    };
    CommentsReactionPartialUpdateActionErrorComponent: {
      /**
       * @description * `action` - action (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'action';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommentsReactionPartialUpdateError:
      | components['schemas']['CommentsReactionPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['CommentsReactionPartialUpdateActionErrorComponent'];
    CommentsReactionPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommentsReactionPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommentsReactionPartialUpdateError'][];
    };
    CommentsUpdateCommenterAvatarErrorComponent: {
      /**
       * @description * `commenter.avatar` - commenter.avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommentsUpdateCommenterNonFieldErrorsErrorComponent: {
      /**
       * @description * `commenter.non_field_errors` - commenter.non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `required` - required
       * @enum {string}
       */
      code: 'invalid' | 'required';
      detail: string;
    };
    CommentsUpdateCommenterUsernameErrorComponent: {
      /**
       * @description * `commenter.username` - commenter.username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'commenter.username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommentsUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommentsUpdateDeletedErrorComponent: {
      /**
       * @description * `deleted` - deleted (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'deleted';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommentsUpdateDownvotesErrorComponent: {
      /**
       * @description * `downvotes` - downvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'downvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommentsUpdateError:
      | components['schemas']['CommentsUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['CommentsUpdateCommenterNonFieldErrorsErrorComponent']
      | components['schemas']['CommentsUpdateCommenterUsernameErrorComponent']
      | components['schemas']['CommentsUpdateCommenterAvatarErrorComponent']
      | components['schemas']['CommentsUpdateRatioErrorComponent']
      | components['schemas']['CommentsUpdatePathErrorComponent']
      | components['schemas']['CommentsUpdateContentErrorComponent']
      | components['schemas']['CommentsUpdateDeletedErrorComponent']
      | components['schemas']['CommentsUpdateUpvotesErrorComponent']
      | components['schemas']['CommentsUpdateDownvotesErrorComponent'];
    CommentsUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommentsUpdatePathErrorComponent: {
      /**
       * @description * `path` - path (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'path';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommentsUpdateRatioErrorComponent: {
      /**
       * @description * `ratio` - ratio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'ratio';
      /**
       * @description * `invalid` - invalid
       *     * `max_string_length` - max_string_length
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'invalid' | 'max_string_length' | 'null' | 'required';
      detail: string;
    };
    CommentsUpdateUpvotesErrorComponent: {
      /**
       * @description * `upvotes` - upvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'upvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommentsUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommentsUpdateError'][];
    };
    CommunitiesCreateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesCreateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesCreateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesCreateError:
      | components['schemas']['CommunitiesCreateNonFieldErrorsErrorComponent']
      | components['schemas']['CommunitiesCreateAvatarErrorComponent']
      | components['schemas']['CommunitiesCreateNameErrorComponent']
      | components['schemas']['CommunitiesCreateDescriptionErrorComponent']
      | components['schemas']['CommunitiesCreateTitleErrorComponent']
      | components['schemas']['CommunitiesCreateBannerErrorComponent']
      | components['schemas']['CommunitiesCreateTypeErrorComponent']
      | components['schemas']['CommunitiesCreateNsfwErrorComponent']
      | components['schemas']['CommunitiesCreateTopicsErrorComponent']
      | components['schemas']['CommunitiesCreateMembersErrorComponent']
      | components['schemas']['CommunitiesCreateModeratorsErrorComponent'];
    CommunitiesCreateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesCreateModeratorsErrorComponent: {
      /**
       * @description * `moderators` - moderators (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'moderators';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesCreateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommunitiesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesCreateNsfwErrorComponent: {
      /**
       * @description * `nsfw` - nsfw (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'nsfw';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesCreateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesCreateTopicsErrorComponent: {
      /**
       * @description * `topics` - topics (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'topics';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesCreateTypeErrorComponent: {
      /**
       * @description * `type` - type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'type';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    CommunitiesCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommunitiesCreateError'][];
    };
    CommunitiesPartialUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesPartialUpdateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesPartialUpdateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesPartialUpdateError:
      | components['schemas']['CommunitiesPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateAvatarErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateNameErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateDescriptionErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateTitleErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateBannerErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateTypeErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateNsfwErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateTopicsErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateMembersErrorComponent']
      | components['schemas']['CommunitiesPartialUpdateModeratorsErrorComponent'];
    CommunitiesPartialUpdateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateModeratorsErrorComponent: {
      /**
       * @description * `moderators` - moderators (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'moderators';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommunitiesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateNsfwErrorComponent: {
      /**
       * @description * `nsfw` - nsfw (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'nsfw';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesPartialUpdateTopicsErrorComponent: {
      /**
       * @description * `topics` - topics (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'topics';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateTypeErrorComponent: {
      /**
       * @description * `type` - type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'type';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    CommunitiesPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommunitiesPartialUpdateError'][];
    };
    CommunitiesUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesUpdateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    CommunitiesUpdateDescriptionErrorComponent: {
      /**
       * @description * `description` - description (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'description';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesUpdateError:
      | components['schemas']['CommunitiesUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['CommunitiesUpdateAvatarErrorComponent']
      | components['schemas']['CommunitiesUpdateNameErrorComponent']
      | components['schemas']['CommunitiesUpdateDescriptionErrorComponent']
      | components['schemas']['CommunitiesUpdateTitleErrorComponent']
      | components['schemas']['CommunitiesUpdateBannerErrorComponent']
      | components['schemas']['CommunitiesUpdateTypeErrorComponent']
      | components['schemas']['CommunitiesUpdateNsfwErrorComponent']
      | components['schemas']['CommunitiesUpdateTopicsErrorComponent']
      | components['schemas']['CommunitiesUpdateMembersErrorComponent']
      | components['schemas']['CommunitiesUpdateModeratorsErrorComponent'];
    CommunitiesUpdateMembersErrorComponent: {
      /**
       * @description * `members` - members (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'members';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesUpdateModeratorsErrorComponent: {
      /**
       * @description * `moderators` - moderators (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'moderators';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    CommunitiesUpdateNameErrorComponent: {
      /**
       * @description * `name` - name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'name';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    CommunitiesUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesUpdateNsfwErrorComponent: {
      /**
       * @description * `nsfw` - nsfw (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'nsfw';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    CommunitiesUpdateTopicsErrorComponent: {
      /**
       * @description * `topics` - topics (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'topics';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    CommunitiesUpdateTypeErrorComponent: {
      /**
       * @description * `type` - type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'type';
      /**
       * @description * `invalid_choice` - invalid_choice
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid_choice' | 'null';
      detail: string;
    };
    CommunitiesUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['CommunitiesUpdateError'][];
    };
    Community: {
      readonly id: number;
      /** Format: uri */
      avatar?: string | null;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
      name: string;
      description: string;
      title?: string | null;
      /** Format: uri */
      banner?: string | null;
      type?: components['schemas']['Type801Enum'];
      nsfw?: boolean;
      topics?: unknown;
      members?: number[];
      moderators?: number[];
    };
    CommunityBasic: {
      name: string;
      /** Format: uri */
      avatar?: string | null;
    };
    CommunityDetailed: {
      readonly id: number;
      moderators: components['schemas']['ProfileBasic'][];
      readonly posts_count: number;
      /** Format: uri */
      avatar?: string | null;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
      name: string;
      description: string;
      title?: string | null;
      /** Format: uri */
      banner?: string | null;
      type?: components['schemas']['Type801Enum'];
      nsfw?: boolean;
      topics?: unknown;
      members?: number[];
    };
    CommunityExists: {
      exists: boolean;
      name: string;
    };
    /** @description Serializer for a response containing a `"detail"` message.
     *     Used for generic informational responses. */
    DetailResponse: {
      detail: string;
    };
    Downvoted: {
      type: string;
      readonly data: {
        [key: string]: unknown;
      };
    };
    Error404: {
      code: components['schemas']['ErrorCode404Enum'];
      detail: string;
      attr: string | null;
    };
    Error500: {
      code: components['schemas']['ErrorCode500Enum'];
      detail: string;
      attr: string | null;
    };
    /**
     * @description * `not_found` - Not Found
     * @enum {string}
     */
    ErrorCode404Enum: 'not_found';
    /**
     * @description * `error` - Error
     * @enum {string}
     */
    ErrorCode500Enum: 'error';
    ErrorResponse404: {
      type: components['schemas']['ClientErrorEnum'];
      errors: components['schemas']['Error404'][];
    };
    ErrorResponse500: {
      type: components['schemas']['ServerErrorEnum'];
      errors: components['schemas']['Error500'][];
    };
    Overview: {
      type: string;
      readonly data: {
        [key: string]: unknown;
      };
    };
    PatchedCommentDetail: {
      readonly id?: number;
      commenter?: components['schemas']['ProfileBasic'] | null;
      ratio?: number;
      path?: string;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at?: string;
      content?: string;
      deleted?: boolean;
      upvotes?: number[];
      downvotes?: number[];
    };
    PatchedCommentReaction: {
      action?: string;
    };
    PatchedCommunity: {
      readonly id?: number;
      /** Format: uri */
      avatar?: string | null;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at?: string;
      name?: string;
      description?: string;
      title?: string | null;
      /** Format: uri */
      banner?: string | null;
      type?: components['schemas']['Type801Enum'];
      nsfw?: boolean;
      topics?: unknown;
      members?: number[];
      moderators?: number[];
    };
    PatchedPost: {
      readonly id?: string;
      readonly community?: components['schemas']['CommunityBasic'];
      readonly poster?: components['schemas']['ProfileBasic'];
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at?: string;
      is_public?: boolean;
      highlighted?: boolean;
      title?: string;
      slug?: string;
      content?: string;
      /** Format: uri */
      cover?: string | null;
      upvotes?: number[];
      downvotes?: number[];
      comments?: number[];
    };
    PatchedProfile: {
      readonly id?: number;
      readonly user?: components['schemas']['User'];
      /** Format: uri */
      avatar?: string | null;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at?: string;
      /** @description Required. 25 characters or fewer. Letters, digits and ./_ only. */
      username?: string;
      first_name?: string | null;
      last_name?: string | null;
      bio?: string | null;
      /** Format: uri */
      banner?: string | null;
    };
    Post: {
      readonly id: string;
      readonly community: components['schemas']['CommunityBasic'];
      readonly poster: components['schemas']['ProfileBasic'];
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
      is_public?: boolean;
      highlighted?: boolean;
      title: string;
      slug?: string;
      content?: string;
      /** Format: uri */
      cover?: string | null;
      upvotes?: number[];
      downvotes?: number[];
      comments?: number[];
    };
    PostCreate: {
      community: number;
      poster: number;
      title: string;
      content?: string;
      /** Format: uri */
      cover?: string | null;
    };
    PostHighlighted: {
      /** Format: uri */
      cover?: string | null;
      title: string;
      readonly id: string;
      slug?: string;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
    };
    PostsCommentsCreateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsCommentsCreateError:
      | components['schemas']['PostsCommentsCreateNonFieldErrorsErrorComponent']
      | components['schemas']['PostsCommentsCreatePathErrorComponent']
      | components['schemas']['PostsCommentsCreateContentErrorComponent'];
    PostsCommentsCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsCommentsCreatePathErrorComponent: {
      /**
       * @description * `path` - path (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'path';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'null'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsCommentsCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['PostsCommentsCreateError'][];
    };
    PostsCreateCommunityErrorComponent: {
      /**
       * @description * `community` - community (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'community';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
      detail: string;
    };
    PostsCreateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsCreateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    PostsCreateError:
      | components['schemas']['PostsCreateNonFieldErrorsErrorComponent']
      | components['schemas']['PostsCreateCommunityErrorComponent']
      | components['schemas']['PostsCreatePosterErrorComponent']
      | components['schemas']['PostsCreateTitleErrorComponent']
      | components['schemas']['PostsCreateContentErrorComponent']
      | components['schemas']['PostsCreateCoverErrorComponent'];
    PostsCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsCreatePosterErrorComponent: {
      /**
       * @description * `poster` - poster (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'poster';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `null` - null
       *     * `required` - required
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'null' | 'required';
      detail: string;
    };
    PostsCreateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['PostsCreateError'][];
    };
    PostsPartialUpdateCommentsErrorComponent: {
      /**
       * @description * `comments` - comments (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'comments';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsPartialUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsPartialUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    PostsPartialUpdateDownvotesErrorComponent: {
      /**
       * @description * `downvotes` - downvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'downvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsPartialUpdateError:
      | components['schemas']['PostsPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['PostsPartialUpdateIsPublicErrorComponent']
      | components['schemas']['PostsPartialUpdateHighlightedErrorComponent']
      | components['schemas']['PostsPartialUpdateTitleErrorComponent']
      | components['schemas']['PostsPartialUpdateSlugErrorComponent']
      | components['schemas']['PostsPartialUpdateContentErrorComponent']
      | components['schemas']['PostsPartialUpdateCoverErrorComponent']
      | components['schemas']['PostsPartialUpdateUpvotesErrorComponent']
      | components['schemas']['PostsPartialUpdateDownvotesErrorComponent']
      | components['schemas']['PostsPartialUpdateCommentsErrorComponent'];
    PostsPartialUpdateHighlightedErrorComponent: {
      /**
       * @description * `highlighted` - highlighted (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'highlighted';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsPartialUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsPartialUpdateSlugErrorComponent: {
      /**
       * @description * `slug` - slug (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'slug';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsPartialUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsPartialUpdateUpvotesErrorComponent: {
      /**
       * @description * `upvotes` - upvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'upvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['PostsPartialUpdateError'][];
    };
    PostsUpdateCommentsErrorComponent: {
      /**
       * @description * `comments` - comments (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'comments';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsUpdateContentErrorComponent: {
      /**
       * @description * `content` - content (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'content';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsUpdateCoverErrorComponent: {
      /**
       * @description * `cover` - cover (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'cover';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    PostsUpdateDownvotesErrorComponent: {
      /**
       * @description * `downvotes` - downvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'downvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsUpdateError:
      | components['schemas']['PostsUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['PostsUpdateIsPublicErrorComponent']
      | components['schemas']['PostsUpdateHighlightedErrorComponent']
      | components['schemas']['PostsUpdateTitleErrorComponent']
      | components['schemas']['PostsUpdateSlugErrorComponent']
      | components['schemas']['PostsUpdateContentErrorComponent']
      | components['schemas']['PostsUpdateCoverErrorComponent']
      | components['schemas']['PostsUpdateUpvotesErrorComponent']
      | components['schemas']['PostsUpdateDownvotesErrorComponent']
      | components['schemas']['PostsUpdateCommentsErrorComponent'];
    PostsUpdateHighlightedErrorComponent: {
      /**
       * @description * `highlighted` - highlighted (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'highlighted';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsUpdateIsPublicErrorComponent: {
      /**
       * @description * `is_public` - is_public (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'is_public';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    PostsUpdateSlugErrorComponent: {
      /**
       * @description * `slug` - slug (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'slug';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsUpdateTitleErrorComponent: {
      /**
       * @description * `title` - title (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'title';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    PostsUpdateUpvotesErrorComponent: {
      /**
       * @description * `upvotes` - upvotes (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'upvotes';
      /**
       * @description * `does_not_exist` - does_not_exist
       *     * `incorrect_type` - incorrect_type
       *     * `not_a_list` - not_a_list
       *     * `null` - null
       * @enum {string}
       */
      code: 'does_not_exist' | 'incorrect_type' | 'not_a_list' | 'null';
      detail: string;
    };
    PostsUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['PostsUpdateError'][];
    };
    Profile: {
      readonly id: number;
      readonly user: components['schemas']['User'];
      /** Format: uri */
      avatar?: string | null;
      /**
       * Create at
       * Format: date-time
       */
      readonly created_at: string;
      /** @description Required. 25 characters or fewer. Letters, digits and ./_ only. */
      username: string;
      first_name?: string | null;
      last_name?: string | null;
      bio?: string | null;
      /** Format: uri */
      banner?: string | null;
    };
    ProfileBasic: {
      /** @description Required. 25 characters or fewer. Letters, digits and ./_ only. */
      username: string;
      /** Format: uri */
      avatar?: string | null;
      readonly name: string | null;
    };
    /**
     * @description * `server_error` - Server Error
     * @enum {string}
     */
    ServerErrorEnum: 'server_error';
    /** @description Serializer for a response with a `"success"` boolean.
     *     Typically used for confirming successful operations. */
    SuccessResponse: {
      success: boolean;
    };
    /**
     * @description * `PUBLIC` - Public
     *     * `RESTRICTED` - Restricted
     *     * `PRIVATE` - Private
     * @enum {string}
     */
    Type801Enum: 'PUBLIC' | 'RESTRICTED' | 'PRIVATE';
    ULoginCreateEmailErrorComponent: {
      /**
       * @description * `email` - email (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'email';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    ULoginCreateError:
      | components['schemas']['ULoginCreateNonFieldErrorsErrorComponent']
      | components['schemas']['ULoginCreateEmailErrorComponent']
      | components['schemas']['ULoginCreatePasswordErrorComponent'];
    ULoginCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    ULoginCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'password';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    ULoginCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['ULoginCreateError'][];
    };
    UMeProfilesCreateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesCreateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesCreateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateError:
      | components['schemas']['UMeProfilesCreateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesCreateAvatarErrorComponent']
      | components['schemas']['UMeProfilesCreateUsernameErrorComponent']
      | components['schemas']['UMeProfilesCreateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesCreateLastNameErrorComponent']
      | components['schemas']['UMeProfilesCreateBioErrorComponent']
      | components['schemas']['UMeProfilesCreateBannerErrorComponent'];
    UMeProfilesCreateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesCreateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesCreateError'][];
    };
    UMeProfilesPartialUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesPartialUpdateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesPartialUpdateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateError:
      | components['schemas']['UMeProfilesPartialUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateAvatarErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateUsernameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateLastNameErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateBioErrorComponent']
      | components['schemas']['UMeProfilesPartialUpdateBannerErrorComponent'];
    UMeProfilesPartialUpdateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesPartialUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesPartialUpdateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesPartialUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesPartialUpdateError'][];
    };
    UMeProfilesUpdateAvatarErrorComponent: {
      /**
       * @description * `avatar` - avatar (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'avatar';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesUpdateBannerErrorComponent: {
      /**
       * @description * `banner` - banner (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'banner';
      /**
       * @description * `empty` - empty
       *     * `invalid` - invalid
       *     * `invalid_image` - invalid_image
       *     * `max_length` - max_length
       *     * `no_name` - no_name
       * @enum {string}
       */
      code: 'empty' | 'invalid' | 'invalid_image' | 'max_length' | 'no_name';
      detail: string;
    };
    UMeProfilesUpdateBioErrorComponent: {
      /**
       * @description * `bio` - bio (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'bio';
      /**
       * @description * `invalid` - invalid
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code: 'invalid' | 'null_characters_not_allowed' | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateError:
      | components['schemas']['UMeProfilesUpdateNonFieldErrorsErrorComponent']
      | components['schemas']['UMeProfilesUpdateAvatarErrorComponent']
      | components['schemas']['UMeProfilesUpdateUsernameErrorComponent']
      | components['schemas']['UMeProfilesUpdateFirstNameErrorComponent']
      | components['schemas']['UMeProfilesUpdateLastNameErrorComponent']
      | components['schemas']['UMeProfilesUpdateBioErrorComponent']
      | components['schemas']['UMeProfilesUpdateBannerErrorComponent'];
    UMeProfilesUpdateFirstNameErrorComponent: {
      /**
       * @description * `first_name` - first_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'first_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateLastNameErrorComponent: {
      /**
       * @description * `last_name` - last_name (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'last_name';
      /**
       * @description * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'invalid'
        | 'max_length'
        | 'null_characters_not_allowed'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    UMeProfilesUpdateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    UMeProfilesUpdateUsernameErrorComponent: {
      /**
       * @description * `username` - username (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'username';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    UMeProfilesUpdateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['UMeProfilesUpdateError'][];
    };
    URegisterCreateEmailErrorComponent: {
      /**
       * @description * `email` - email (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'email';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       *     * `unique` - unique
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed'
        | 'unique';
      detail: string;
    };
    URegisterCreateError:
      | components['schemas']['URegisterCreateNonFieldErrorsErrorComponent']
      | components['schemas']['URegisterCreateEmailErrorComponent']
      | components['schemas']['URegisterCreatePasswordErrorComponent'];
    URegisterCreateNonFieldErrorsErrorComponent: {
      /**
       * @description * `non_field_errors` - non_field_errors (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'non_field_errors';
      /**
       * @description * `invalid` - invalid
       *     * `null` - null
       * @enum {string}
       */
      code: 'invalid' | 'null';
      detail: string;
    };
    URegisterCreatePasswordErrorComponent: {
      /**
       * @description * `password` - password (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attr: 'password';
      /**
       * @description * `blank` - blank
       *     * `invalid` - invalid
       *     * `max_length` - max_length
       *     * `null` - null
       *     * `null_characters_not_allowed` - null_characters_not_allowed
       *     * `required` - required
       *     * `surrogate_characters_not_allowed` - surrogate_characters_not_allowed
       * @enum {string}
       */
      code:
        | 'blank'
        | 'invalid'
        | 'max_length'
        | 'null'
        | 'null_characters_not_allowed'
        | 'required'
        | 'surrogate_characters_not_allowed';
      detail: string;
    };
    URegisterCreateValidationError: {
      type: components['schemas']['ValidationErrorEnum'];
      errors: components['schemas']['URegisterCreateError'][];
    };
    Upvoted: {
      type: string;
      readonly data: {
        [key: string]: unknown;
      };
    };
    User: {
      readonly id: number;
      /**
       * Email address
       * Format: email
       */
      email: string;
      password: string;
      /** Format: date-time */
      readonly date_joined: string;
    };
    /**
     * @description * `validation_error` - Validation Error
     * @enum {string}
     */
    ValidationErrorEnum: 'validation_error';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  comments_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Comment. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  comments_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Comment. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentDetail'];
        'application/x-www-form-urlencoded': components['schemas']['CommentDetail'];
        'multipart/form-data': components['schemas']['CommentDetail'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentsUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  comments_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Comment. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  comments_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Comment. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedCommentDetail'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedCommentDetail'];
        'multipart/form-data': components['schemas']['PatchedCommentDetail'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentsPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  comments_reaction_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Comment. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedCommentReaction'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedCommentReaction'];
        'multipart/form-data': components['schemas']['PatchedCommentReaction'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SuccessResponse'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentsReactionPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Community'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Community'];
        'application/x-www-form-urlencoded': components['schemas']['Community'];
        'multipart/form-data': components['schemas']['Community'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Community'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommunitiesCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommunityDetailed'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Community'];
        'application/x-www-form-urlencoded': components['schemas']['Community'];
        'multipart/form-data': components['schemas']['Community'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Community'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommunitiesUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedCommunity'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedCommunity'];
        'multipart/form-data': components['schemas']['PatchedCommunity'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Community'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommunitiesPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_exists_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommunityExists'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_highlighted_posts_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PostHighlighted'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  communities_posts_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PostCreate'];
        'application/x-www-form-urlencoded': components['schemas']['PostCreate'];
        'multipart/form-data': components['schemas']['PostCreate'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PostsCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Post'];
        'application/x-www-form-urlencoded': components['schemas']['Post'];
        'multipart/form-data': components['schemas']['Post'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PostsUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedPost'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedPost'];
        'multipart/form-data': components['schemas']['PatchedPost'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PostsPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_comments_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  posts_comments_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique value identifying this Post. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentCreate'];
        'application/x-www-form-urlencoded': components['schemas']['CommentCreate'];
        'multipart/form-data': components['schemas']['CommentCreate'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'][];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PostsCommentsCreateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_login_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Auth'];
        'application/x-www-form-urlencoded': components['schemas']['Auth'];
        'multipart/form-data': components['schemas']['Auth'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthToken'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ULoginCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_logout_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DetailResponse'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Profile'];
        'application/x-www-form-urlencoded': components['schemas']['Profile'];
        'multipart/form-data': components['schemas']['Profile'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Profile'];
        'application/x-www-form-urlencoded': components['schemas']['Profile'];
        'multipart/form-data': components['schemas']['Profile'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_me_profiles_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedProfile'];
        'application/x-www-form-urlencoded': components['schemas']['PatchedProfile'];
        'multipart/form-data': components['schemas']['PatchedProfile'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UMeProfilesPartialUpdateValidationError'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'][];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_comments_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CommentDetail'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_downvoted_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Downvoted'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_overview_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Overview'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_posts_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Post'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_profiles_upvoted_list: {
    parameters: {
      query?: {
        /** @description A search term. */
        search?: string;
      };
      header?: never;
      path: {
        /** @description A unique integer value identifying this Profile. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Upvoted'][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse404'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
  u_register_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Auth'];
        'application/x-www-form-urlencoded': components['schemas']['Auth'];
        'multipart/form-data': components['schemas']['Auth'];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Auth'];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['URegisterCreateValidationError'];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse500'];
        };
      };
    };
  };
}
