// This file is auto-generated by @hey-api/openapi-ts
import type {
  AuthLoginCreateData,
  AuthLoginCreateResponse,
  AuthLoginCreateError2,
  AuthLogoutCreateData,
  AuthLogoutCreateResponse,
  AuthLogoutCreateError,
  AuthRegisterCreateData,
  AuthRegisterCreateResponse,
  AuthRegisterCreateError2,
  CommentsDestroyData,
  CommentsDestroyResponse,
  CommentsDestroyError,
  CommentsRetrieveData,
  CommentsRetrieveResponse,
  CommentsRetrieveError,
  CommentsPartialUpdateData,
  CommentsPartialUpdateResponse,
  CommentsPartialUpdateError2,
  CommentsUpdateData,
  CommentsUpdateResponse,
  CommentsUpdateError2,
  CommunitiesListData,
  CommunitiesListResponse,
  CommunitiesListError,
  CommunitiesCreateData,
  CommunitiesCreateResponse,
  CommunitiesCreateError2,
  CommunitiesDestroyData,
  CommunitiesDestroyResponse,
  CommunitiesDestroyError,
  CommunitiesRetrieveData,
  CommunitiesRetrieveResponse,
  CommunitiesRetrieveError,
  CommunitiesPartialUpdateData,
  CommunitiesPartialUpdateResponse,
  CommunitiesPartialUpdateError2,
  CommunitiesUpdateData,
  CommunitiesUpdateResponse,
  CommunitiesUpdateError2,
  CommunitiesExistsRetrieveData,
  CommunitiesExistsRetrieveResponse,
  CommunitiesExistsRetrieveError,
  CommunitiesHighlightedPostsListData,
  CommunitiesHighlightedPostsListResponse,
  CommunitiesHighlightedPostsListError,
  CommunitiesPostsListData,
  CommunitiesPostsListResponse,
  CommunitiesPostsListError,
  PostsListData,
  PostsListResponse,
  PostsListError,
  PostsCreateData,
  PostsCreateResponse,
  PostsCreateError2,
  PostsDestroyData,
  PostsDestroyResponse,
  PostsDestroyError,
  PostsRetrieveData,
  PostsRetrieveResponse,
  PostsRetrieveError,
  PostsPartialUpdateData,
  PostsPartialUpdateResponse,
  PostsPartialUpdateError2,
  PostsUpdateData,
  PostsUpdateResponse,
  PostsUpdateError2,
  PostsCommentsListData,
  PostsCommentsListResponse,
  PostsCommentsListError,
  PostsCommentsCreateData,
  PostsCommentsCreateResponse,
  PostsCommentsCreateError2,
  UsersMeRetrieveData,
  UsersMeRetrieveResponse,
  UsersMeRetrieveError,
  UsersMeProfilesListData,
  UsersMeProfilesListResponse,
  UsersMeProfilesListError,
  UsersMeProfilesCreateData,
  UsersMeProfilesCreateResponse,
  UsersMeProfilesCreateError2,
  UsersMeProfilesDestroyData,
  UsersMeProfilesDestroyResponse,
  UsersMeProfilesDestroyError,
  UsersMeProfilesRetrieveData,
  UsersMeProfilesRetrieveResponse,
  UsersMeProfilesRetrieveError,
  UsersMeProfilesPartialUpdateData,
  UsersMeProfilesPartialUpdateResponse,
  UsersMeProfilesPartialUpdateError2,
  UsersMeProfilesUpdateData,
  UsersMeProfilesUpdateResponse,
  UsersMeProfilesUpdateError2,
  UsersProfilesListData,
  UsersProfilesListResponse,
  UsersProfilesListError,
  UsersProfilesRetrieveData,
  UsersProfilesRetrieveResponse,
  UsersProfilesRetrieveError
} from './types.gen';
import { createClient, createConfig, type Options } from '@hey-api/client-fetch';

export const client = createClient(createConfig());

/**
 * Customized drf basic token authentication.
 *
 * This view authenticates the user using email and password credentials
 * and issues a token upon successful login.
 */
export const authLoginCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthLoginCreateResponse,
    AuthLoginCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/auth/login/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * View to handle user logout by deleting the authentication token.
 */
export const authLogoutCreate = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthLogoutCreateResponse,
    AuthLogoutCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/auth/logout/',
    ...options
  });
};

/**
 * View to handle registering of new users.
 */
export const authRegisterCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthRegisterCreateResponse,
    AuthRegisterCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/auth/register/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * A viewset that provides `update`, `retrieve`, and `destroy` actions.
 *
 * To use it, override the class and set the `.queryset` and
 * `.serializer_class` attributes.
 */
export const commentsDestroy = <ThrowOnError extends boolean = false>(
  options: Options<CommentsDestroyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CommentsDestroyResponse,
    CommentsDestroyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/comments/{id}/',
    ...options
  });
};

/**
 * A viewset that provides `update`, `retrieve`, and `destroy` actions.
 *
 * To use it, override the class and set the `.queryset` and
 * `.serializer_class` attributes.
 */
export const commentsRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<CommentsRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommentsRetrieveResponse,
    CommentsRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/comments/{id}/',
    ...options
  });
};

/**
 * A viewset that provides `update`, `retrieve`, and `destroy` actions.
 *
 * To use it, override the class and set the `.queryset` and
 * `.serializer_class` attributes.
 */
export const commentsPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CommentsPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    CommentsPartialUpdateResponse,
    CommentsPartialUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/comments/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * A viewset that provides `update`, `retrieve`, and `destroy` actions.
 *
 * To use it, override the class and set the `.queryset` and
 * `.serializer_class` attributes.
 */
export const commentsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CommentsUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    CommentsUpdateResponse,
    CommentsUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/comments/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const communitiesList = <ThrowOnError extends boolean = false>(
  options?: Options<CommunitiesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommunitiesListResponse,
    CommunitiesListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/',
    ...options
  });
};

export const communitiesCreate = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CommunitiesCreateResponse,
    CommunitiesCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const communitiesDestroy = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesDestroyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CommunitiesDestroyResponse,
    CommunitiesDestroyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/',
    ...options
  });
};

export const communitiesRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommunitiesRetrieveResponse,
    CommunitiesRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/',
    ...options
  });
};

export const communitiesPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    CommunitiesPartialUpdateResponse,
    CommunitiesPartialUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const communitiesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    CommunitiesUpdateResponse,
    CommunitiesUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const communitiesExistsRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesExistsRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommunitiesExistsRetrieveResponse,
    CommunitiesExistsRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/exists/',
    ...options
  });
};

export const communitiesHighlightedPostsList = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesHighlightedPostsListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommunitiesHighlightedPostsListResponse,
    CommunitiesHighlightedPostsListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/highlighted_posts/',
    ...options
  });
};

export const communitiesPostsList = <ThrowOnError extends boolean = false>(
  options: Options<CommunitiesPostsListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CommunitiesPostsListResponse,
    CommunitiesPostsListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/communities/{name}/posts/',
    ...options
  });
};

export const postsList = <ThrowOnError extends boolean = false>(
  options?: Options<PostsListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<PostsListResponse, PostsListError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/',
    ...options
  });
};

export const postsCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostsCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostsCreateResponse,
    PostsCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const postsDestroy = <ThrowOnError extends boolean = false>(
  options: Options<PostsDestroyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    PostsDestroyResponse,
    PostsDestroyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/',
    ...options
  });
};

export const postsRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<PostsRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PostsRetrieveResponse,
    PostsRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/',
    ...options
  });
};

export const postsPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PostsPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    PostsPartialUpdateResponse,
    PostsPartialUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const postsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PostsUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    PostsUpdateResponse,
    PostsUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const postsCommentsList = <ThrowOnError extends boolean = false>(
  options: Options<PostsCommentsListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    PostsCommentsListResponse,
    PostsCommentsListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/comments/',
    ...options
  });
};

export const postsCommentsCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostsCommentsCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostsCommentsCreateResponse,
    PostsCommentsCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/posts/{id}/comments/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * View to retrieve information for the currently authenticated user.
 *
 * - `get`: Returns the details of the authenticated user based on their token.
 *
 * Permission:
 * - Requires user authentication.
 */
export const usersMeRetrieve = <ThrowOnError extends boolean = false>(
  options?: Options<UsersMeRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersMeRetrieveResponse,
    UsersMeRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/',
    ...options
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesList = <ThrowOnError extends boolean = false>(
  options?: Options<UsersMeProfilesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersMeProfilesListResponse,
    UsersMeProfilesListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/',
    ...options
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersMeProfilesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UsersMeProfilesCreateResponse,
    UsersMeProfilesCreateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesDestroy = <ThrowOnError extends boolean = false>(
  options: Options<UsersMeProfilesDestroyData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    UsersMeProfilesDestroyResponse,
    UsersMeProfilesDestroyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/{id}/',
    ...options
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<UsersMeProfilesRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersMeProfilesRetrieveResponse,
    UsersMeProfilesRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/{id}/',
    ...options
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersMeProfilesPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UsersMeProfilesPartialUpdateResponse,
    UsersMeProfilesPartialUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * ViewSet to manage profiles associated with the authenticated user.
 *
 * Permissions:
 * - Requires user authentication to access and modify profiles.
 */
export const usersMeProfilesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersMeProfilesUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UsersMeProfilesUpdateResponse,
    UsersMeProfilesUpdateError2,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/me/profiles/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

/**
 * ViewSet for performing read-only operations on the Profile model.
 *
 * Filtering:
 * - Allows searching profiles by username.
 */
export const usersProfilesList = <ThrowOnError extends boolean = false>(
  options?: Options<UsersProfilesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersProfilesListResponse,
    UsersProfilesListError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/profiles/',
    ...options
  });
};

/**
 * ViewSet for performing read-only operations on the Profile model.
 *
 * Filtering:
 * - Allows searching profiles by username.
 */
export const usersProfilesRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfilesRetrieveData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersProfilesRetrieveResponse,
    UsersProfilesRetrieveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/v1/users/profiles/{id}/',
    ...options
  });
};
