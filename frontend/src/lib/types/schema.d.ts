/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/v1/quiblets/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['quiblets_list'];
		put?: never;
		post: operations['quiblets_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/quiblets/{id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['quiblets_retrieve'];
		put: operations['quiblets_update'];
		post?: never;
		delete: operations['quiblets_destroy'];
		options?: never;
		head?: never;
		patch: operations['quiblets_partial_update'];
		trace?: never;
	};
	'/api/v1/users/auth/login/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Customized drf basic token authentication.
		 *
		 *     This view authenticates the user using email and password credentials
		 *     and issues a token upon successful login. */
		post: operations['users_auth_login_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/auth/logout/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description View to handle user logout by deleting the authentication token. */
		post: operations['users_auth_logout_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/auth/register/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description View to handle registering of new users. */
		post: operations['users_auth_register_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/me/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description View to retrieve information for the currently authenticated user.
		 *
		 *     - `get`: Returns the details of the authenticated user based on their token.
		 *
		 *     Permission:
		 *     - Requires user authentication. */
		get: operations['users_me_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/me/profiles/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		get: operations['users_me_profiles_list'];
		put?: never;
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		post: operations['users_me_profiles_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/me/profiles/{id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		get: operations['users_me_profiles_retrieve'];
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		put: operations['users_me_profiles_update'];
		post?: never;
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		delete: operations['users_me_profiles_destroy'];
		options?: never;
		head?: never;
		/** @description ViewSet to manage profiles associated with the authenticated user.
		 *
		 *     Permissions:
		 *     - Requires user authentication to access and modify profiles. */
		patch: operations['users_me_profiles_partial_update'];
		trace?: never;
	};
	'/api/v1/users/profiles/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description ViewSet for performing read-only operations on the Profile model.
		 *
		 *     Filtering:
		 *     - Allows searching profiles by username. */
		get: operations['users_profiles_list'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v1/users/profiles/{id}/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description ViewSet for performing read-only operations on the Profile model.
		 *
		 *     Filtering:
		 *     - Allows searching profiles by username. */
		get: operations['users_profiles_retrieve'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		Auth: {
			/**
			 * Email Address
			 * Format: email
			 */
			email: string;
			password: string;
		};
		AuthTokenResponse: {
			token: string;
		};
		/**
		 * @description * `primary` - primary
		 *     * `secondary` - secondary
		 *     * `accent` - accent
		 *     * `neutral` - neutral
		 *     * `info` - info
		 *     * `success` - success
		 *     * `warning` - warning
		 *     * `error` - error
		 * @enum {string}
		 */
		ColorEnum:
			| 'primary'
			| 'secondary'
			| 'accent'
			| 'neutral'
			| 'info'
			| 'success'
			| 'warning'
			| 'error';
		/** @description Serializer for views returning just a response with detail key */
		DetailResponse: {
			detail: string;
		};
		PatchedProfile: {
			readonly id?: number;
			readonly user?: components['schemas']['User'];
			/** Format: date-time */
			readonly created_at?: string;
			color?: components['schemas']['ColorEnum'];
			/** Format: uri */
			avatar?: string | null;
			username?: string;
			first_name?: string | null;
			last_name?: string | null;
		};
		PatchedQuiblet: {
			readonly id?: string;
			/** Format: date-time */
			readonly created_at?: string;
			/** Format: uri */
			avatar?: string | null;
			is_public?: boolean;
			name?: string;
			description?: string;
			/** Format: uri */
			cover?: string | null;
			members?: number[];
			rangers?: number[];
		};
		Profile: {
			readonly id: number;
			readonly user: components['schemas']['User'];
			/** Format: date-time */
			readonly created_at: string;
			color?: components['schemas']['ColorEnum'];
			/** Format: uri */
			avatar?: string | null;
			username: string;
			first_name?: string | null;
			last_name?: string | null;
		};
		Quiblet: {
			readonly id: string;
			/** Format: date-time */
			readonly created_at: string;
			/** Format: uri */
			avatar?: string | null;
			is_public?: boolean;
			name: string;
			description: string;
			/** Format: uri */
			cover?: string | null;
			members?: number[];
			rangers?: number[];
		};
		User: {
			readonly id: number;
			/**
			 * Email Address
			 * Format: email
			 */
			email: string;
			password: string;
			/** Format: date-time */
			readonly date_joined: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	quiblets_list: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Quiblet'][];
				};
			};
		};
	};
	quiblets_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Quiblet'];
				'application/x-www-form-urlencoded': components['schemas']['Quiblet'];
				'multipart/form-data': components['schemas']['Quiblet'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Quiblet'];
				};
			};
		};
	};
	quiblets_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique value identifying this Quiblet. */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Quiblet'];
				};
			};
		};
	};
	quiblets_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique value identifying this Quiblet. */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Quiblet'];
				'application/x-www-form-urlencoded': components['schemas']['Quiblet'];
				'multipart/form-data': components['schemas']['Quiblet'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Quiblet'];
				};
			};
		};
	};
	quiblets_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique value identifying this Quiblet. */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	quiblets_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique value identifying this Quiblet. */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedQuiblet'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedQuiblet'];
				'multipart/form-data': components['schemas']['PatchedQuiblet'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Quiblet'];
				};
			};
		};
	};
	users_auth_login_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Auth'];
				'application/x-www-form-urlencoded': components['schemas']['Auth'];
				'multipart/form-data': components['schemas']['Auth'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['AuthTokenResponse'];
				};
			};
		};
	};
	users_auth_logout_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['DetailResponse'];
				};
			};
		};
	};
	users_auth_register_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Auth'];
				'application/x-www-form-urlencoded': components['schemas']['Auth'];
				'multipart/form-data': components['schemas']['Auth'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Auth'];
				};
			};
		};
	};
	users_me_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
	users_me_profiles_list: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'][];
				};
			};
		};
	};
	users_me_profiles_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Profile'];
				'application/x-www-form-urlencoded': components['schemas']['Profile'];
				'multipart/form-data': components['schemas']['Profile'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
	users_me_profiles_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Profile. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
	users_me_profiles_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Profile. */
				id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['Profile'];
				'application/x-www-form-urlencoded': components['schemas']['Profile'];
				'multipart/form-data': components['schemas']['Profile'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
	users_me_profiles_destroy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Profile. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	users_me_profiles_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Profile. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedProfile'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedProfile'];
				'multipart/form-data': components['schemas']['PatchedProfile'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
	users_profiles_list: {
		parameters: {
			query?: {
				/** @description A search term. */
				search?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'][];
				};
			};
		};
	};
	users_profiles_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description A unique integer value identifying this Profile. */
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Profile'];
				};
			};
		};
	};
}
