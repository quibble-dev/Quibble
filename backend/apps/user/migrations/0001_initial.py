# Generated by Django 5.1.4 on 2024-12-11 02:49

import functools

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import dynamic_filenames
from django.db import migrations, models

import common.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(blank=True, null=True, verbose_name='last login'),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique': 'A user with that username already exists.'
                        },
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name='username',
                    ),
                ),
                (
                    'first_name',
                    models.CharField(blank=True, max_length=150, verbose_name='first name'),
                ),
                (
                    'last_name',
                    models.CharField(blank=True, max_length=150, verbose_name='last name'),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name='date joined'
                    ),
                ),
                (
                    'color',
                    models.CharField(
                        choices=[
                            ('primary', 'primary'),
                            ('secondary', 'secondary'),
                            ('accent', 'accent'),
                            ('neutral', 'neutral'),
                            ('info', 'info'),
                            ('success', 'success'),
                            ('warning', 'warning'),
                            ('error', 'error'),
                        ],
                        default=functools.partial(
                            common.mixins.get_random_color,
                            *(
                                [
                                    ('primary', 'primary'),
                                    ('secondary', 'secondary'),
                                    ('accent', 'accent'),
                                    ('neutral', 'neutral'),
                                    ('info', 'info'),
                                    ('success', 'success'),
                                    ('warning', 'warning'),
                                    ('error', 'error'),
                                ],
                            ),
                            **{},
                        ),
                        max_length=25,
                        verbose_name='color',
                    ),
                ),
                (
                    'avatar',
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=dynamic_filenames.FilePattern(
                            filename_pattern='avatar/{uuid:s}{ext}'
                        ),
                        verbose_name='avatar',
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        error_messages={'unique': 'A user with that email already exists.'},
                        max_length=254,
                        unique=True,
                        verbose_name='Email address',
                    ),
                ),
                ('bio', models.TextField(verbose_name='Bio')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
